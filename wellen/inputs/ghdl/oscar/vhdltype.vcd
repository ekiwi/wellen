$date
	Sat Feb 22 12:30:35 2025

$end
$version
	GHDL FST v0
$end
$timescale
	1fs
$end
$attrbegin misc 03 /home/oscar/venv/vunit/lib/python3.12/site-packages/vunit/vhdl/check/src/check_api.vhd 1 $end
$attrbegin misc 04 1 25 $end
$scope vhdl_package check_pkg $end
$var logic 1 ! check_enabled $end
$upscope $end
$attrbegin misc 03 /home/oscar/venv/vunit/lib/python3.12/site-packages/vunit/vhdl/run/src/run_api.vhd 2 $end
$attrbegin misc 04 2 19 $end
$scope vhdl_package run_pkg $end
$var logic 21 " runner[0:20] $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/ve_manual_tb.vhdl 3 $end
$attrbegin misc 04 3 15 $end
$scope vhdl_architecture ve_manual_tb $end
$var logic 1 # clk $end
$var logic 8 $ data0_addr_i[7:0] $end
$var logic 8 % data1_addr_i[7:0] $end
$var logic 8 & weight_addr_i[7:0] $end
$var logic 1 ' data_ren_i $end
$var logic 1 ( data_wen_i $end
$var logic 1 ) weight_ren_i $end
$var logic 1 * weight_wen_i $end
$var logic 32 + data0_i[31:0] $end
$var logic 32 , data1_i[31:0] $end
$var logic 64 - weight_i[63:0] $end
$scope vhdl_record memreg_c_i $end
$attrbegin misc 07 swap_t 3 noswap swap switch 00000000 00000001 00000010 1 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 . swap $end
$attrbegin misc 07 enable_t 2 enable hold 00000000 00000001 2 $end
$attrbegin misc 07 "" 2 $end
$var enum 8 / datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 0 weightreg $end
$upscope $end
$scope vhdl_record writebuff_c_i $end
$attrbegin misc 07 "" 1 $end
$var enum 8 1 swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 2 datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 3 weightreg $end
$upscope $end
$attrbegin misc 07 instruction 37 fftadd0 fftadd1 fftsub0 fftsub1 conv firstconv lastconv sum nop matmul00 matmul01 matmul11 matmul10 matadd00 matadd01 matadd10 matadd11 matsub matdet matmul00t matmul01t matmul11t matmul10t unitri1 unitri2 unitri3 unitri4 unispec abs16 mulden mulnum nrit max firstmax lastmax zeroacc acctoout 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000 00001001 00001010 00001011 00001100 00001101 00001110 00001111 00010000 00010001 00010010 00010011 00010100 00010101 00010110 00010111 00011000 00011001 00011010 00011011 00011100 00011101 00011110 00011111 00100000 00100001 00100010 00100011 00100100 3 $end
$attrbegin misc 07 "" 3 $end
$var enum 8 4 inst_i $end
$attrbegin misc 07 ppctrl_t 21 nop add32 add10 add21 fftsub0 fftsub1 sumfirst sum select7 select6 select5 select4 select3 select2 select1 select0 unitri sum16 sum16left matmulleft nrit 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000 00001001 00001010 00001011 00001100 00001101 00001110 00001111 00010000 00010001 00010010 00010011 00010100 4 $end
$attrbegin misc 07 "" 4 $end
$var enum 8 5 ppinst_i $end
$scope vhdl_record ppshiftinst_i $end
$attrbegin misc 07 "" 2 $end
$var enum 8 6 acce $end
$var integer 32 7 shift $end
$var logic 1 8 use_lod $end
$attrbegin misc 07 shift_t 2 left right 00000000 00000001 5 $end
$attrbegin misc 07 "" 5 $end
$var enum 8 9 shift_dir $end
$upscope $end
$scope vhdl_record addbiasinst_i $end
$attrbegin misc 07 ppacc_t 3 pass negate addbias 00000000 00000001 00000010 6 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 : acc $end
$attrbegin misc 07 quant_t 3 trunc round unbiased 00000000 00000001 00000010 7 $end
$attrbegin misc 07 "" 7 $end
$var enum 8 ; quant $end
$upscope $end
$scope vhdl_record clipinst_i $end
$attrbegin misc 07 clip_t 6 none clip8 clip16 clipone16 clipone16_12f clipzero 00000000 00000001 00000010 00000011 00000100 00000101 8 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 < clip $end
$attrbegin misc 07 outreg_t 13 none out7 out6 out5 out4 out3 out2 out1 out0 out76 out54 out32 out10 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000 00001001 00001010 00001011 00001100 9 $end
$attrbegin misc 07 "" 9 $end
$var enum 8 = outreg $end
$upscope $end
$scope vhdl_record lzod_i $end
$var logic 2 > word[1:0] $end
$attrbegin misc 07 lzod_t 4 none store1 store2 store3 00000000 00000001 00000010 00000011 10 $end
$attrbegin misc 07 "" 10 $end
$var enum 8 ? store $end
$attrbegin misc 07 lzod_out_t 5 none val nrit nrit2 det1 00000000 00000001 00000010 00000011 00000100 11 $end
$attrbegin misc 07 "" 11 $end
$var enum 8 @ output $end
$upscope $end
$var logic 8 A zpdata_i[7:0] $end
$var logic 8 B zpweight_i[7:0] $end
$var logic 64 C bias_i[63:0] $end
$var logic 8 D data0_addr_o[7:0] $end
$var logic 8 E data1_addr_o[7:0] $end
$var logic 8 F weight_addr_o[7:0] $end
$var logic 1 G data_ren_o $end
$var logic 1 H data_wen_o $end
$var logic 1 I weight_ren_o $end
$var logic 1 J weight_wen_o $end
$var logic 64 K outreg_o[63:0] $end
$var logic 64 L writebuffer_o[63:0] $end
$var logic 4 M stall[3:0] $end
$var logic 1 N en_o $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/ve_wctrlpipe.vhdl 4 $end
$attrbegin misc 04 4 63 $end
$attrbegin misc 05 3 59 $end
$scope vhdl_architecture ve_wctrlpipe_inst $end
$var logic 1 # clk $end
$var logic 8 $ data0_addr_i[7:0] $end
$var logic 8 % data1_addr_i[7:0] $end
$var logic 8 & weight_addr_i[7:0] $end
$var logic 8 O bias_addr_i[7:0] $end
$attrbegin misc 07 bias_addr_t 2 ctrl shift 00000000 00000001 12 $end
$attrbegin misc 07 "" 12 $end
$var enum 8 P bias_addr_ctrl_i $end
$var logic 1 ' data_ren_i $end
$var logic 1 ( data_wen_i $end
$var logic 1 ) weight_ren_i $end
$var logic 1 * weight_wen_i $end
$var logic 1 Q bias_ren_i $end
$var logic 32 + data0_i[31:0] $end
$var logic 32 , data1_i[31:0] $end
$var logic 64 - weight_i[63:0] $end
$scope vhdl_record memreg_c_i $end
$attrbegin misc 07 "" 1 $end
$var enum 8 . swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 / datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 0 weightreg $end
$upscope $end
$scope vhdl_record writebuff_c_i $end
$attrbegin misc 07 "" 1 $end
$var enum 8 1 swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 2 datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 3 weightreg $end
$upscope $end
$attrbegin misc 07 "" 3 $end
$var enum 8 4 inst_i $end
$attrbegin misc 07 "" 4 $end
$var enum 8 5 ppinst_i $end
$scope vhdl_record ppshiftinst_i $end
$attrbegin misc 07 "" 2 $end
$var enum 8 6 acce $end
$var integer 32 7 shift $end
$var logic 1 8 use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 9 shift_dir $end
$upscope $end
$scope vhdl_record addbiasinst_i $end
$attrbegin misc 07 "" 6 $end
$var enum 8 : acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 ; quant $end
$upscope $end
$scope vhdl_record clipinst_i $end
$attrbegin misc 07 "" 8 $end
$var enum 8 < clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 = outreg $end
$upscope $end
$scope vhdl_record lzod_i $end
$var logic 2 > word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 ? store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 @ output $end
$upscope $end
$attrbegin misc 07 feedback_t 5 keep shift_to_3 shift_to_2 clip_to_3 clip_to_1 00000000 00000001 00000010 00000011 00000100 13 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 R feedback_ctrl_i $end
$var logic 8 A zpdata_i[7:0] $end
$var logic 8 B zpweight_i[7:0] $end
$var logic 64 C bias_i[63:0] $end
$var logic 8 D data0_addr_o[7:0] $end
$var logic 8 E data1_addr_o[7:0] $end
$var logic 8 F weight_addr_o[7:0] $end
$var logic 6 S bias_addr_o[5:0] $end
$var logic 1 G data_ren_o $end
$var logic 1 H data_wen_o $end
$var logic 1 I weight_ren_o $end
$var logic 1 J weight_wen_o $end
$var logic 1 T bias_ren_o $end
$var logic 64 K outreg_o[63:0] $end
$var logic 64 L writebuffer_o[63:0] $end
$var logic 4 M stall[3:0] $end
$var logic 1 N en_o $end
$var logic 1 U en $end
$var logic 4 V en_cntr[3:0] $end
$var logic 12 W en_pipe[0:11] $end
$scope union data0_addr_pipe $end
$var logic 8 X 0[7:0] $end
$var logic 8 Y 1[7:0] $end
$var logic 8 Z 2[7:0] $end
$var logic 8 [ 3[7:0] $end
$var logic 8 \ 4[7:0] $end
$var logic 8 ] 5[7:0] $end
$var logic 8 ^ 6[7:0] $end
$var logic 8 _ 7[7:0] $end
$var logic 8 ` 8[7:0] $end
$var logic 8 a 9[7:0] $end
$var logic 8 b 10[7:0] $end
$upscope $end
$scope union data1_addr_pipe $end
$var logic 8 c 0[7:0] $end
$var logic 8 d 1[7:0] $end
$var logic 8 e 2[7:0] $end
$var logic 8 f 3[7:0] $end
$var logic 8 g 4[7:0] $end
$var logic 8 h 5[7:0] $end
$var logic 8 i 6[7:0] $end
$var logic 8 j 7[7:0] $end
$var logic 8 k 8[7:0] $end
$var logic 8 l 9[7:0] $end
$var logic 8 m 10[7:0] $end
$upscope $end
$scope union weight_addr_pipe $end
$var logic 8 n 0[7:0] $end
$var logic 8 o 1[7:0] $end
$var logic 8 p 2[7:0] $end
$var logic 8 q 3[7:0] $end
$var logic 8 r 4[7:0] $end
$var logic 8 s 5[7:0] $end
$var logic 8 t 6[7:0] $end
$var logic 8 u 7[7:0] $end
$var logic 8 v 8[7:0] $end
$var logic 8 w 9[7:0] $end
$var logic 8 x 10[7:0] $end
$upscope $end
$scope union bias_addr_pipe $end
$var logic 8 y 0[7:0] $end
$var logic 8 z 1[7:0] $end
$var logic 8 { 2[7:0] $end
$var logic 8 | 3[7:0] $end
$var logic 8 } 4[7:0] $end
$var logic 8 ~ 5[7:0] $end
$upscope $end
$scope union bias_addr_ctrl_pipe $end
$attrbegin misc 07 "" 12 $end
$var enum 8 !! 0 $end
$attrbegin misc 07 "" 12 $end
$var enum 8 "! 1 $end
$attrbegin misc 07 "" 12 $end
$var enum 8 #! 2 $end
$attrbegin misc 07 "" 12 $end
$var enum 8 $! 3 $end
$attrbegin misc 07 "" 12 $end
$var enum 8 %! 4 $end
$attrbegin misc 07 "" 12 $end
$var enum 8 &! 5 $end
$attrbegin misc 07 "" 12 $end
$var enum 8 '! 6 $end
$upscope $end
$var logic 1 (! data_ren_pipe[0:0] $end
$var logic 11 )! data_wen_pipe[0:10] $end
$var logic 1 *! weight_ren_pipe[0:0] $end
$var logic 11 +! weight_wen_pipe[0:10] $end
$var logic 7 ,! bias_ren_pipe[0:6] $end
$scope union memreg_c_pipe $end
$scope vhdl_record 0 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 -! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 .! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 /! weightreg $end
$upscope $end
$scope vhdl_record 1 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 0! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 1! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 2! weightreg $end
$upscope $end
$upscope $end
$scope union writebuff_c_pipe $end
$scope vhdl_record 0 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 3! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 4! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 5! weightreg $end
$upscope $end
$scope vhdl_record 1 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 6! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 7! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 8! weightreg $end
$upscope $end
$scope vhdl_record 2 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 9! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 :! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 ;! weightreg $end
$upscope $end
$scope vhdl_record 3 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 <! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 =! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 >! weightreg $end
$upscope $end
$scope vhdl_record 4 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 ?! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 @! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 A! weightreg $end
$upscope $end
$scope vhdl_record 5 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 B! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 C! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 D! weightreg $end
$upscope $end
$scope vhdl_record 6 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 E! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 F! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 G! weightreg $end
$upscope $end
$scope vhdl_record 7 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 H! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 I! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 J! weightreg $end
$upscope $end
$scope vhdl_record 8 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 K! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 L! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 M! weightreg $end
$upscope $end
$scope vhdl_record 9 $end
$attrbegin misc 07 "" 1 $end
$var enum 8 N! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 O! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 P! weightreg $end
$upscope $end
$upscope $end
$scope union lzod_pipe $end
$scope vhdl_record 0 $end
$var logic 2 Q! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 R! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 S! output $end
$upscope $end
$scope vhdl_record 1 $end
$var logic 2 T! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 U! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 V! output $end
$upscope $end
$scope vhdl_record 2 $end
$var logic 2 W! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 X! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 Y! output $end
$upscope $end
$scope vhdl_record 3 $end
$var logic 2 Z! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 [! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 \! output $end
$upscope $end
$scope vhdl_record 4 $end
$var logic 2 ]! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 ^! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 _! output $end
$upscope $end
$scope vhdl_record 5 $end
$var logic 2 `! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 a! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 b! output $end
$upscope $end
$upscope $end
$scope union inst_pipe $end
$attrbegin misc 07 "" 3 $end
$var enum 8 c! 0 $end
$attrbegin misc 07 "" 3 $end
$var enum 8 d! 1 $end
$attrbegin misc 07 "" 3 $end
$var enum 8 e! 2 $end
$attrbegin misc 07 "" 3 $end
$var enum 8 f! 3 $end
$attrbegin misc 07 "" 3 $end
$var enum 8 g! 4 $end
$upscope $end
$scope union ppinst_pipe $end
$attrbegin misc 07 "" 4 $end
$var enum 8 h! 0 $end
$attrbegin misc 07 "" 4 $end
$var enum 8 i! 1 $end
$attrbegin misc 07 "" 4 $end
$var enum 8 j! 2 $end
$attrbegin misc 07 "" 4 $end
$var enum 8 k! 3 $end
$attrbegin misc 07 "" 4 $end
$var enum 8 l! 4 $end
$upscope $end
$scope union ppshiftinst_pipe $end
$scope vhdl_record 0 $end
$attrbegin misc 07 "" 2 $end
$var enum 8 m! acce $end
$var integer 32 n! shift $end
$var logic 1 o! use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 p! shift_dir $end
$upscope $end
$scope vhdl_record 1 $end
$attrbegin misc 07 "" 2 $end
$var enum 8 q! acce $end
$var integer 32 r! shift $end
$var logic 1 s! use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 t! shift_dir $end
$upscope $end
$scope vhdl_record 2 $end
$attrbegin misc 07 "" 2 $end
$var enum 8 u! acce $end
$var integer 32 v! shift $end
$var logic 1 w! use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 x! shift_dir $end
$upscope $end
$scope vhdl_record 3 $end
$attrbegin misc 07 "" 2 $end
$var enum 8 y! acce $end
$var integer 32 z! shift $end
$var logic 1 {! use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 |! shift_dir $end
$upscope $end
$scope vhdl_record 4 $end
$attrbegin misc 07 "" 2 $end
$var enum 8 }! acce $end
$var integer 32 ~! shift $end
$var logic 1 !" use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 "" shift_dir $end
$upscope $end
$scope vhdl_record 5 $end
$attrbegin misc 07 "" 2 $end
$var enum 8 #" acce $end
$var integer 32 $" shift $end
$var logic 1 %" use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 &" shift_dir $end
$upscope $end
$scope vhdl_record 6 $end
$attrbegin misc 07 "" 2 $end
$var enum 8 '" acce $end
$var integer 32 (" shift $end
$var logic 1 )" use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 *" shift_dir $end
$upscope $end
$upscope $end
$scope union addbiasinst_pipe $end
$scope vhdl_record 0 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 +" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 ," quant $end
$upscope $end
$scope vhdl_record 1 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 -" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 ." quant $end
$upscope $end
$scope vhdl_record 2 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 /" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 0" quant $end
$upscope $end
$scope vhdl_record 3 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 1" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 2" quant $end
$upscope $end
$scope vhdl_record 4 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 3" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 4" quant $end
$upscope $end
$scope vhdl_record 5 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 5" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 6" quant $end
$upscope $end
$scope vhdl_record 6 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 7" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 8" quant $end
$upscope $end
$scope vhdl_record 7 $end
$attrbegin misc 07 "" 6 $end
$var enum 8 9" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 :" quant $end
$upscope $end
$upscope $end
$scope union clipinst_pipe $end
$scope vhdl_record 0 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 ;" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 <" outreg $end
$upscope $end
$scope vhdl_record 1 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 =" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 >" outreg $end
$upscope $end
$scope vhdl_record 2 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 ?" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 @" outreg $end
$upscope $end
$scope vhdl_record 3 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 A" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 B" outreg $end
$upscope $end
$scope vhdl_record 4 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 C" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 D" outreg $end
$upscope $end
$scope vhdl_record 5 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 E" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 F" outreg $end
$upscope $end
$scope vhdl_record 6 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 G" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 H" outreg $end
$upscope $end
$scope vhdl_record 7 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 I" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 J" outreg $end
$upscope $end
$scope vhdl_record 8 $end
$attrbegin misc 07 "" 8 $end
$var enum 8 K" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 L" outreg $end
$upscope $end
$upscope $end
$var logic 6 M" bias_addr_h[5:0] $end
$var logic 2 N" bias_addr_l[1:0] $end
$var logic 2 O" bias_addr_l_pipe[1:0] $end
$var logic 1 P" bias_ren $end
$var logic 16 Q" bias_reg[15:0] $end
$var logic 16 R" bias_reg_in[15:0] $end
$scope union feedback_ctrl_pipe $end
$attrbegin misc 07 "" 13 $end
$var enum 8 S" 0 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 T" 1 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 U" 2 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 V" 3 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 W" 4 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 X" 5 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 Y" 6 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 Z" 7 $end
$attrbegin misc 07 "" 13 $end
$var enum 8 [" 8 $end
$upscope $end
$var logic 16 \" shift_result[15:0] $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/vecore.vhdl 5 $end
$attrbegin misc 04 5 44 $end
$attrbegin misc 05 4 178 $end
$scope vhdl_architecture vecore_i $end
$var logic 1 # clk $end
$var logic 1 ]" enable_memreg $end
$var logic 1 ^" enable_add $end
$var logic 1 _" enable_mul $end
$var logic 1 `" enable_acc $end
$var logic 1 a" enable_lod $end
$var logic 1 b" enable_sum $end
$var logic 1 c" enable_shift $end
$var logic 1 d" enable_add_bias $end
$var logic 1 e" enable_clip $end
$var logic 1 f" enable_writebuff $end
$var logic 32 + data0[31:0] $end
$var logic 32 , data1[31:0] $end
$var logic 64 - weight[63:0] $end
$scope vhdl_record memctrl $end
$attrbegin misc 07 "" 1 $end
$var enum 8 0! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 1! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 2! weightreg $end
$upscope $end
$scope vhdl_record wbctrl $end
$attrbegin misc 07 "" 1 $end
$var enum 8 N! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 O! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 P! weightreg $end
$upscope $end
$attrbegin misc 07 "" 3 $end
$var enum 8 e! inst_addmul $end
$attrbegin misc 07 "" 3 $end
$var enum 8 g! inst_acc $end
$attrbegin misc 07 "" 4 $end
$var enum 8 l! ppinst $end
$scope vhdl_record shift_ctrl $end
$attrbegin misc 07 "" 2 $end
$var enum 8 '" acce $end
$var integer 32 (" shift $end
$var logic 1 )" use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 *" shift_dir $end
$upscope $end
$scope vhdl_record bias_add_ctrl $end
$attrbegin misc 07 "" 6 $end
$var enum 8 9" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 :" quant $end
$upscope $end
$scope vhdl_record clip_ctrl $end
$attrbegin misc 07 "" 8 $end
$var enum 8 K" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 L" outreg $end
$upscope $end
$scope vhdl_record lodctrl $end
$var logic 2 `! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 a! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 b! output $end
$upscope $end
$attrbegin misc 07 "" 13 $end
$var enum 8 Y" feedback_shift $end
$attrbegin misc 07 "" 13 $end
$var enum 8 [" feedback_clip $end
$var logic 8 A zpdata[7:0] $end
$var logic 8 B zpweight[7:0] $end
$var logic 16 Q" bias[15:0] $end
$var logic 16 \" shift_result[15:0] $end
$var logic 64 K outreg[63:0] $end
$var logic 64 L writebuffer[63:0] $end
$scope vhdl_record decoded_addmul $end
$attrbegin misc 07 mux7l0_t 4 zero l7 f5 f7 00000000 00000001 00000010 00000011 14 $end
$attrbegin misc 07 "" 14 $end
$var enum 8 g" mux7l0 $end
$attrbegin misc 07 mux7l1_t 5 zpd zero r7 l3 l5 00000000 00000001 00000010 00000011 00000100 15 $end
$attrbegin misc 07 "" 15 $end
$var enum 8 h" mux7l1 $end
$attrbegin misc 07 mux7r0_t 8 r7 r3 r5 onefft l1 f1 f3 f5 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 16 $end
$attrbegin misc 07 "" 16 $end
$var enum 8 i" mux7r0 $end
$attrbegin misc 07 mux7r1_t 2 zpw zero 00000000 00000001 17 $end
$attrbegin misc 07 "" 17 $end
$var enum 8 j" mux7r1 $end
$scope vhdl_record addmul7 $end
$attrbegin misc 07 sign_t 2 s u 00000000 00000001 18 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 k" signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 l" signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 m" signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 n" signr1 $end
$attrbegin misc 07 addsub_t 2 add sub 00000000 00000001 19 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 o" addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 p" addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 q" en_addmul $end
$upscope $end
$attrbegin misc 07 mux6l0_t 4 zero l6 f4 f6 00000000 00000001 00000010 00000011 20 $end
$attrbegin misc 07 "" 20 $end
$var enum 8 r" mux6l0 $end
$attrbegin misc 07 mux6l1_t 5 zpd zero r6 l2 l4 00000000 00000001 00000010 00000011 00000100 21 $end
$attrbegin misc 07 "" 21 $end
$var enum 8 s" mux6l1 $end
$attrbegin misc 07 mux6r0_t 9 r6 r3 r5 r7 onefft l1 f1 f3 f5 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000 22 $end
$attrbegin misc 07 "" 22 $end
$var enum 8 t" mux6r0 $end
$attrbegin misc 07 mux6r1_t 2 zpw zero 00000000 00000001 23 $end
$attrbegin misc 07 "" 23 $end
$var enum 8 u" mux6r1 $end
$scope vhdl_record addmul6 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 v" signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 w" signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 x" signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 y" signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 z" addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 {" addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 |" en_addmul $end
$upscope $end
$attrbegin misc 07 mux5l0_t 5 zero l5 l7 f5 f7 00000000 00000001 00000010 00000011 00000100 24 $end
$attrbegin misc 07 "" 24 $end
$var enum 8 }" mux5l0 $end
$attrbegin misc 07 mux5l1_t 5 zpd zero r5 l3 l5 00000000 00000001 00000010 00000011 00000100 25 $end
$attrbegin misc 07 "" 25 $end
$var enum 8 ~" mux5l1 $end
$attrbegin misc 07 mux5r0_t 9 r5 r2 r4 r6 onefft l0 f0 f2 f4 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 00001000 26 $end
$attrbegin misc 07 "" 26 $end
$var enum 8 !# mux5r0 $end
$attrbegin misc 07 mux5r1_t 2 zpw zero 00000000 00000001 27 $end
$attrbegin misc 07 "" 27 $end
$var enum 8 "# mux5r1 $end
$scope vhdl_record addmul5 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ## signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 $# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 %# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 &# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 '# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 (# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 )# en_addmul $end
$upscope $end
$attrbegin misc 07 mux4l0_t 5 zero l4 l6 f4 f6 00000000 00000001 00000010 00000011 00000100 28 $end
$attrbegin misc 07 "" 28 $end
$var enum 8 *# mux4l0 $end
$attrbegin misc 07 mux4l1_t 5 zpd zero r4 l2 l4 00000000 00000001 00000010 00000011 00000100 29 $end
$attrbegin misc 07 "" 29 $end
$var enum 8 +# mux4l1 $end
$attrbegin misc 07 mux4r0_t 8 r4 r2 r6 onefft l0 f0 f2 f4 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 30 $end
$attrbegin misc 07 "" 30 $end
$var enum 8 ,# mux4r0 $end
$attrbegin misc 07 mux4r1_t 2 zpw zero 00000000 00000001 31 $end
$attrbegin misc 07 "" 31 $end
$var enum 8 -# mux4r1 $end
$scope vhdl_record addmul4 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 .# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 /# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 0# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 1# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 2# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 3# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 4# en_addmul $end
$upscope $end
$attrbegin misc 07 mux3l0_t 4 zero l3 l5 f7 00000000 00000001 00000010 00000011 32 $end
$attrbegin misc 07 "" 32 $end
$var enum 8 5# mux3l0 $end
$attrbegin misc 07 mux3l1_t 4 zpd zero r3 l1 00000000 00000001 00000010 00000011 33 $end
$attrbegin misc 07 "" 33 $end
$var enum 8 6# mux3l1 $end
$attrbegin misc 07 mux3r0_t 7 r3 r1 r5 r7 one onefft l3 00000000 00000001 00000010 00000011 00000100 00000101 00000110 34 $end
$attrbegin misc 07 "" 34 $end
$var enum 8 7# mux3r0 $end
$attrbegin misc 07 mux3r1_t 2 zpw zero 00000000 00000001 35 $end
$attrbegin misc 07 "" 35 $end
$var enum 8 8# mux3r1 $end
$scope vhdl_record addmul3 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 9# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 :# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ;# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 <# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 =# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 ># addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 ?# en_addmul $end
$upscope $end
$attrbegin misc 07 mux2l0_t 4 zero l2 l4 f6 00000000 00000001 00000010 00000011 36 $end
$attrbegin misc 07 "" 36 $end
$var enum 8 @# mux2l0 $end
$attrbegin misc 07 mux2l1_t 4 zpd zero r2 l0 00000000 00000001 00000010 00000011 37 $end
$attrbegin misc 07 "" 37 $end
$var enum 8 A# mux2l1 $end
$attrbegin misc 07 mux2r0_t 8 r2 r1 r3 r5 r7 one onefft l3 00000000 00000001 00000010 00000011 00000100 00000101 00000110 00000111 38 $end
$attrbegin misc 07 "" 38 $end
$var enum 8 B# mux2r0 $end
$attrbegin misc 07 mux2r1_t 2 zpw zero 00000000 00000001 39 $end
$attrbegin misc 07 "" 39 $end
$var enum 8 C# mux2r1 $end
$scope vhdl_record addmul2 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 D# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 E# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 F# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 G# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 H# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 I# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 J# en_addmul $end
$upscope $end
$attrbegin misc 07 mux1l0_t 2 l1 l5 00000000 00000001 40 $end
$attrbegin misc 07 "" 40 $end
$var enum 8 K# mux1l0 $end
$attrbegin misc 07 mux1l1_t 4 zpd zero r1 l1 00000000 00000001 00000010 00000011 41 $end
$attrbegin misc 07 "" 41 $end
$var enum 8 L# mux1l1 $end
$attrbegin misc 07 mux1r0_t 7 r1 r0 r2 r4 r6 onefft l2 00000000 00000001 00000010 00000011 00000100 00000101 00000110 42 $end
$attrbegin misc 07 "" 42 $end
$var enum 8 M# mux1r0 $end
$attrbegin misc 07 mux1r1_t 2 zpw zero 00000000 00000001 43 $end
$attrbegin misc 07 "" 43 $end
$var enum 8 N# mux1r1 $end
$scope vhdl_record addmul1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 O# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 P# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 Q# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 R# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 S# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 T# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 U# en_addmul $end
$upscope $end
$attrbegin misc 07 mux0l0_t 3 zero l0 l4 00000000 00000001 00000010 44 $end
$attrbegin misc 07 "" 44 $end
$var enum 8 V# mux0l0 $end
$attrbegin misc 07 mux0l1_t 4 zpd zero r0 l0 00000000 00000001 00000010 00000011 45 $end
$attrbegin misc 07 "" 45 $end
$var enum 8 W# mux0l1 $end
$attrbegin misc 07 mux0r0_t 6 r0 r2 r4 r6 onefft l2 00000000 00000001 00000010 00000011 00000100 00000101 46 $end
$attrbegin misc 07 "" 46 $end
$var enum 8 X# mux0r0 $end
$attrbegin misc 07 mux0r1_t 2 zpw zero 00000000 00000001 47 $end
$attrbegin misc 07 "" 47 $end
$var enum 8 Y# mux0r1 $end
$scope vhdl_record addmul0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 Z# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 [# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 \# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ]# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 ^# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 _# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 `# en_addmul $end
$upscope $end
$upscope $end
$scope vhdl_record decoded_acc $end
$scope vhdl_record acc7 $end
$attrbegin misc 07 acc_t 4 keep acc zero max 00000000 00000001 00000010 00000011 48 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 a# acc $end
$attrbegin misc 07 addo_t 3 zero acc max 00000000 00000001 00000010 49 $end
$attrbegin misc 07 "" 49 $end
$var enum 8 b# add $end
$attrbegin misc 07 reg_t 4 keep add acc max 00000000 00000001 00000010 00000011 50 $end
$attrbegin misc 07 "" 50 $end
$var enum 8 c# reg $end
$upscope $end
$scope vhdl_record acc6 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 d# acc $end
$attrbegin misc 07 adde_t 6 zero acc odd odd8 abs16 max 00000000 00000001 00000010 00000011 00000100 00000101 51 $end
$attrbegin misc 07 "" 51 $end
$var enum 8 e# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 f# reg $end
$upscope $end
$scope vhdl_record acc5 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 g# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 h# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 i# reg $end
$upscope $end
$scope vhdl_record acc4 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 j# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 k# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 l# reg $end
$upscope $end
$scope vhdl_record acc3 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 m# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 n# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 o# reg $end
$upscope $end
$scope vhdl_record acc2 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 p# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 q# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 r# reg $end
$upscope $end
$scope vhdl_record acc1 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 s# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 t# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 u# reg $end
$upscope $end
$scope vhdl_record acc0 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 v# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 w# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 x# reg $end
$upscope $end
$upscope $end
$scope vhdl_record decoded_pp $end
$attrbegin misc 07 ppodd_t 4 zero add add8 left 00000000 00000001 00000010 00000011 52 $end
$attrbegin misc 07 "" 52 $end
$var enum 8 y# mux3 $end
$attrbegin misc 07 ppeven_t 3 zero add left 00000000 00000001 00000010 53 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 z# mux2 $end
$attrbegin misc 07 "" 52 $end
$var enum 8 {# mux1 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 |# mux0 $end
$attrbegin misc 07 ppadd_t 2 zero acc 00000000 00000001 54 $end
$attrbegin misc 07 "" 54 $end
$var enum 8 }# acc $end
$attrbegin misc 07 addsub2_t 3 add sub subl 00000000 00000001 00000010 55 $end
$attrbegin misc 07 "" 55 $end
$var enum 8 ~# addsub $end
$attrbegin misc 07 enable_w_load_t 3 enable hold load 00000000 00000001 00000010 56 $end
$attrbegin misc 07 "" 56 $end
$var enum 8 !$ reg $end
$upscope $end
$scope vhdl_record delayed_decoded_pp $end
$attrbegin misc 07 "" 52 $end
$var enum 8 "$ mux3 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 #$ mux2 $end
$attrbegin misc 07 "" 52 $end
$var enum 8 $$ mux1 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 %$ mux0 $end
$attrbegin misc 07 "" 54 $end
$var enum 8 &$ acc $end
$attrbegin misc 07 "" 55 $end
$var enum 8 '$ addsub $end
$attrbegin misc 07 "" 56 $end
$var enum 8 ($ reg $end
$upscope $end
$var logic 64 )$ datareg[63:0] $end
$var logic 64 *$ weightreg[63:0] $end
$var logic 64 +$ outreg_int[63:0] $end
$var logic 33 ,$ sum[32:0] $end
$scope vhdl_record shift_from_lod $end
$attrbegin misc 07 "" 2 $end
$var enum 8 -$ acce $end
$var integer 32 .$ shift $end
$var logic 1 /$ use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 0$ shift_dir $end
$upscope $end
$var logic 1 1$ to_addbias $end
$var logic 64 2$ feedback[63:0] $end
$var logic 16 3$ clip_result[15:0] $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/memreg.vhdl 6 $end
$attrbegin misc 04 6 19 $end
$attrbegin misc 05 5 158 $end
$scope vhdl_architecture memreg_i $end
$var logic 1 # clk $end
$var logic 1 4$ en $end
$var logic 32 + data0[31:0] $end
$var logic 32 , data1[31:0] $end
$var logic 64 - weight[63:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 1 $end
$var enum 8 0! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 1! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 2! weightreg $end
$upscope $end
$var logic 64 )$ dataout[63:0] $end
$var logic 64 *$ weightout[63:0] $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/vearith.vhdl 7 $end
$attrbegin misc 04 7 30 $end
$attrbegin misc 05 5 171 $end
$scope vhdl_architecture vearith_i $end
$var logic 1 # clk $end
$var logic 1 5$ enable_add $end
$var logic 1 6$ enable_mul $end
$var logic 1 7$ enable_acc $end
$var logic 1 8$ enable_sum $end
$var logic 1 9$ enable_lod $end
$var logic 64 )$ data[63:0] $end
$var logic 64 *$ weight[63:0] $end
$var logic 64 2$ feedback[63:0] $end
$scope vhdl_record ctrl_addmul $end
$attrbegin misc 07 "" 14 $end
$var enum 8 g" mux7l0 $end
$attrbegin misc 07 "" 15 $end
$var enum 8 h" mux7l1 $end
$attrbegin misc 07 "" 16 $end
$var enum 8 i" mux7r0 $end
$attrbegin misc 07 "" 17 $end
$var enum 8 j" mux7r1 $end
$scope vhdl_record addmul7 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 k" signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 l" signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 m" signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 n" signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 o" addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 p" addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 q" en_addmul $end
$upscope $end
$attrbegin misc 07 "" 20 $end
$var enum 8 r" mux6l0 $end
$attrbegin misc 07 "" 21 $end
$var enum 8 s" mux6l1 $end
$attrbegin misc 07 "" 22 $end
$var enum 8 t" mux6r0 $end
$attrbegin misc 07 "" 23 $end
$var enum 8 u" mux6r1 $end
$scope vhdl_record addmul6 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 v" signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 w" signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 x" signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 y" signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 z" addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 {" addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 |" en_addmul $end
$upscope $end
$attrbegin misc 07 "" 24 $end
$var enum 8 }" mux5l0 $end
$attrbegin misc 07 "" 25 $end
$var enum 8 ~" mux5l1 $end
$attrbegin misc 07 "" 26 $end
$var enum 8 !# mux5r0 $end
$attrbegin misc 07 "" 27 $end
$var enum 8 "# mux5r1 $end
$scope vhdl_record addmul5 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ## signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 $# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 %# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 &# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 '# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 (# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 )# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 28 $end
$var enum 8 *# mux4l0 $end
$attrbegin misc 07 "" 29 $end
$var enum 8 +# mux4l1 $end
$attrbegin misc 07 "" 30 $end
$var enum 8 ,# mux4r0 $end
$attrbegin misc 07 "" 31 $end
$var enum 8 -# mux4r1 $end
$scope vhdl_record addmul4 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 .# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 /# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 0# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 1# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 2# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 3# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 4# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 32 $end
$var enum 8 5# mux3l0 $end
$attrbegin misc 07 "" 33 $end
$var enum 8 6# mux3l1 $end
$attrbegin misc 07 "" 34 $end
$var enum 8 7# mux3r0 $end
$attrbegin misc 07 "" 35 $end
$var enum 8 8# mux3r1 $end
$scope vhdl_record addmul3 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 9# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 :# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ;# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 <# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 =# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 ># addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 ?# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 36 $end
$var enum 8 @# mux2l0 $end
$attrbegin misc 07 "" 37 $end
$var enum 8 A# mux2l1 $end
$attrbegin misc 07 "" 38 $end
$var enum 8 B# mux2r0 $end
$attrbegin misc 07 "" 39 $end
$var enum 8 C# mux2r1 $end
$scope vhdl_record addmul2 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 D# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 E# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 F# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 G# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 H# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 I# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 J# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 40 $end
$var enum 8 K# mux1l0 $end
$attrbegin misc 07 "" 41 $end
$var enum 8 L# mux1l1 $end
$attrbegin misc 07 "" 42 $end
$var enum 8 M# mux1r0 $end
$attrbegin misc 07 "" 43 $end
$var enum 8 N# mux1r1 $end
$scope vhdl_record addmul1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 O# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 P# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 Q# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 R# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 S# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 T# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 U# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 44 $end
$var enum 8 V# mux0l0 $end
$attrbegin misc 07 "" 45 $end
$var enum 8 W# mux0l1 $end
$attrbegin misc 07 "" 46 $end
$var enum 8 X# mux0r0 $end
$attrbegin misc 07 "" 47 $end
$var enum 8 Y# mux0r1 $end
$scope vhdl_record addmul0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 Z# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 [# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 \# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ]# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 ^# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 _# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 `# en_addmul $end
$upscope $end
$upscope $end
$scope vhdl_record ctrl_acc $end
$scope vhdl_record acc7 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 a# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 b# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 c# reg $end
$upscope $end
$scope vhdl_record acc6 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 d# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 e# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 f# reg $end
$upscope $end
$scope vhdl_record acc5 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 g# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 h# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 i# reg $end
$upscope $end
$scope vhdl_record acc4 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 j# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 k# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 l# reg $end
$upscope $end
$scope vhdl_record acc3 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 m# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 n# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 o# reg $end
$upscope $end
$scope vhdl_record acc2 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 p# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 q# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 r# reg $end
$upscope $end
$scope vhdl_record acc1 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 s# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 t# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 u# reg $end
$upscope $end
$scope vhdl_record acc0 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 v# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 w# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 x# reg $end
$upscope $end
$upscope $end
$scope vhdl_record ppctrl $end
$attrbegin misc 07 "" 52 $end
$var enum 8 "$ mux3 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 #$ mux2 $end
$attrbegin misc 07 "" 52 $end
$var enum 8 $$ mux1 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 %$ mux0 $end
$attrbegin misc 07 "" 54 $end
$var enum 8 &$ acc $end
$attrbegin misc 07 "" 55 $end
$var enum 8 '$ addsub $end
$attrbegin misc 07 "" 56 $end
$var enum 8 ($ reg $end
$upscope $end
$scope vhdl_record lodctrl $end
$var logic 2 `! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 a! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 b! output $end
$upscope $end
$var logic 8 A zpdata[7:0] $end
$var logic 8 B zpweight[7:0] $end
$var logic 33 ,$ result[32:0] $end
$scope vhdl_record to_shift $end
$attrbegin misc 07 "" 2 $end
$var enum 8 -$ acce $end
$var integer 32 .$ shift $end
$var logic 1 /$ use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 0$ shift_dir $end
$upscope $end
$var logic 1 1$ to_addbias $end
$var logic 8 :$ val7l0[7:0] $end
$var logic 8 ;$ val7l1[7:0] $end
$var logic 8 <$ val7r0[7:0] $end
$var logic 8 =$ val7r1[7:0] $end
$var logic 8 >$ val6l0[7:0] $end
$var logic 8 ?$ val6l1[7:0] $end
$var logic 8 @$ val6r0[7:0] $end
$var logic 8 A$ val6r1[7:0] $end
$var logic 8 B$ val5l0[7:0] $end
$var logic 8 C$ val5l1[7:0] $end
$var logic 8 D$ val5r0[7:0] $end
$var logic 8 E$ val5r1[7:0] $end
$var logic 8 F$ val4l0[7:0] $end
$var logic 8 G$ val4l1[7:0] $end
$var logic 8 H$ val4r0[7:0] $end
$var logic 8 I$ val4r1[7:0] $end
$var logic 8 J$ val3l0[7:0] $end
$var logic 8 K$ val3l1[7:0] $end
$var logic 8 L$ val3r0[7:0] $end
$var logic 8 M$ val3r1[7:0] $end
$var logic 8 N$ val2l0[7:0] $end
$var logic 8 O$ val2l1[7:0] $end
$var logic 8 P$ val2r0[7:0] $end
$var logic 8 Q$ val2r1[7:0] $end
$var logic 8 R$ val1l0[7:0] $end
$var logic 8 S$ val1l1[7:0] $end
$var logic 8 T$ val1r0[7:0] $end
$var logic 8 U$ val1r1[7:0] $end
$var logic 8 V$ val0l0[7:0] $end
$var logic 8 W$ val0l1[7:0] $end
$var logic 8 X$ val0r0[7:0] $end
$var logic 8 Y$ val0r1[7:0] $end
$var logic 18 Z$ mul7[17:0] $end
$var logic 18 [$ mul6[17:0] $end
$var logic 18 \$ mul5[17:0] $end
$var logic 18 ]$ mul4[17:0] $end
$var logic 18 ^$ mul3[17:0] $end
$var logic 18 _$ mul2[17:0] $end
$var logic 18 `$ mul1[17:0] $end
$var logic 18 a$ mul0[17:0] $end
$var logic 32 b$ acc7[31:0] $end
$var logic 32 c$ acc6[31:0] $end
$var logic 32 d$ acc5[31:0] $end
$var logic 32 e$ acc4[31:0] $end
$var logic 32 f$ acc3[31:0] $end
$var logic 32 g$ acc2[31:0] $end
$var logic 32 h$ acc1[31:0] $end
$var logic 32 i$ acc0[31:0] $end
$var logic 1 j$ sign6 $end
$var logic 1 k$ sign4 $end
$var logic 1 l$ sign2 $end
$var logic 1 m$ sign0 $end
$var logic 32 n$ loadin[31:0] $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/addmul.vhdl 8 $end
$attrbegin misc 04 8 18 $end
$attrbegin misc 05 7 192 $end
$scope vhdl_architecture am7 $end
$var logic 1 # clk $end
$var logic 1 o$ enable_add $end
$var logic 1 p$ enable_mul $end
$var logic 8 :$ inl0[7:0] $end
$var logic 8 ;$ inl1[7:0] $end
$var logic 8 <$ inr0[7:0] $end
$var logic 8 =$ inr1[7:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 18 $end
$var enum 8 k" signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 l" signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 m" signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 n" signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 o" addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 p" addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 q" en_addmul $end
$upscope $end
$var logic 18 Z$ am_res[17:0] $end
$var logic 9 q$ addl0[8:0] $end
$var logic 9 r$ addl1[8:0] $end
$var logic 9 s$ addr0[8:0] $end
$var logic 9 t$ addr1[8:0] $end
$var logic 10 u$ addl0in[9:0] $end
$var logic 10 v$ addl1in[9:0] $end
$var logic 10 w$ addr0in[9:0] $end
$var logic 10 x$ addr1in[9:0] $end
$var logic 10 y$ addlout[9:0] $end
$var logic 10 z$ addrout[9:0] $end
$var logic 9 {$ addl[8:0] $end
$var logic 9 |$ addr[8:0] $end
$var logic 18 }$ mulres[17:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 ~$ mulen $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/accumulatorodd.vhdl 9 $end
$attrbegin misc 04 9 17 $end
$attrbegin misc 05 7 207 $end
$scope vhdl_architecture accum7 $end
$var logic 1 # clk $end
$var logic 1 !% en $end
$var logic 18 Z$ mul[17:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 48 $end
$var enum 8 a# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 b# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 c# reg $end
$upscope $end
$var logic 32 b$ result[31:0] $end
$var logic 32 "% accumulator[31:0] $end
$var logic 32 #% add_input0[31:0] $end
$var logic 32 $% add_input1[31:0] $end
$var logic 32 %% add_res[31:0] $end
$var logic 32 &% max_value[31:0] $end
$upscope $end
$attrbegin misc 04 8 18 $end
$attrbegin misc 05 7 251 $end
$scope vhdl_architecture am6 $end
$var logic 1 # clk $end
$var logic 1 '% enable_add $end
$var logic 1 (% enable_mul $end
$var logic 8 >$ inl0[7:0] $end
$var logic 8 ?$ inl1[7:0] $end
$var logic 8 @$ inr0[7:0] $end
$var logic 8 A$ inr1[7:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 18 $end
$var enum 8 v" signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 w" signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 x" signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 y" signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 z" addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 {" addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 |" en_addmul $end
$upscope $end
$var logic 18 [$ am_res[17:0] $end
$var logic 9 )% addl0[8:0] $end
$var logic 9 *% addl1[8:0] $end
$var logic 9 +% addr0[8:0] $end
$var logic 9 ,% addr1[8:0] $end
$var logic 10 -% addl0in[9:0] $end
$var logic 10 .% addl1in[9:0] $end
$var logic 10 /% addr0in[9:0] $end
$var logic 10 0% addr1in[9:0] $end
$var logic 10 1% addlout[9:0] $end
$var logic 10 2% addrout[9:0] $end
$var logic 9 3% addl[8:0] $end
$var logic 9 4% addr[8:0] $end
$var logic 18 5% mulres[17:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 6% mulen $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/accumulatoreven.vhdl 10 $end
$attrbegin misc 04 10 21 $end
$attrbegin misc 05 7 266 $end
$scope vhdl_architecture accum6 $end
$var logic 1 # clk $end
$var logic 1 7% en $end
$var logic 18 [$ mul[17:0] $end
$var logic 18 Z$ mul_odd[17:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 48 $end
$var enum 8 d# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 e# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 f# reg $end
$upscope $end
$var logic 32 c$ result[31:0] $end
$var logic 1 j$ sign_o $end
$var logic 32 8% accumulator[31:0] $end
$var logic 32 9% add_input0[31:0] $end
$var logic 32 :% add_input1[31:0] $end
$var logic 32 ;% add_res[31:0] $end
$var logic 32 <% mul_odd_abs[31:0] $end
$var logic 32 =% mul_abs[31:0] $end
$var logic 32 >% max_value[31:0] $end
$upscope $end
$attrbegin misc 04 8 18 $end
$attrbegin misc 05 7 312 $end
$scope vhdl_architecture am5 $end
$var logic 1 # clk $end
$var logic 1 ?% enable_add $end
$var logic 1 @% enable_mul $end
$var logic 8 B$ inl0[7:0] $end
$var logic 8 C$ inl1[7:0] $end
$var logic 8 D$ inr0[7:0] $end
$var logic 8 E$ inr1[7:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ## signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 $# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 %# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 &# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 '# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 (# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 )# en_addmul $end
$upscope $end
$var logic 18 \$ am_res[17:0] $end
$var logic 9 A% addl0[8:0] $end
$var logic 9 B% addl1[8:0] $end
$var logic 9 C% addr0[8:0] $end
$var logic 9 D% addr1[8:0] $end
$var logic 10 E% addl0in[9:0] $end
$var logic 10 F% addl1in[9:0] $end
$var logic 10 G% addr0in[9:0] $end
$var logic 10 H% addr1in[9:0] $end
$var logic 10 I% addlout[9:0] $end
$var logic 10 J% addrout[9:0] $end
$var logic 9 K% addl[8:0] $end
$var logic 9 L% addr[8:0] $end
$var logic 18 M% mulres[17:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 N% mulen $end
$upscope $end
$attrbegin misc 04 9 17 $end
$attrbegin misc 05 7 327 $end
$scope vhdl_architecture accum5 $end
$var logic 1 # clk $end
$var logic 1 O% en $end
$var logic 18 \$ mul[17:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 48 $end
$var enum 8 g# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 h# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 i# reg $end
$upscope $end
$var logic 32 d$ result[31:0] $end
$var logic 32 P% accumulator[31:0] $end
$var logic 32 Q% add_input0[31:0] $end
$var logic 32 R% add_input1[31:0] $end
$var logic 32 S% add_res[31:0] $end
$var logic 32 T% max_value[31:0] $end
$upscope $end
$attrbegin misc 04 8 18 $end
$attrbegin misc 05 7 370 $end
$scope vhdl_architecture am4 $end
$var logic 1 # clk $end
$var logic 1 U% enable_add $end
$var logic 1 V% enable_mul $end
$var logic 8 F$ inl0[7:0] $end
$var logic 8 G$ inl1[7:0] $end
$var logic 8 H$ inr0[7:0] $end
$var logic 8 I$ inr1[7:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 18 $end
$var enum 8 .# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 /# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 0# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 1# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 2# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 3# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 4# en_addmul $end
$upscope $end
$var logic 18 ]$ am_res[17:0] $end
$var logic 9 W% addl0[8:0] $end
$var logic 9 X% addl1[8:0] $end
$var logic 9 Y% addr0[8:0] $end
$var logic 9 Z% addr1[8:0] $end
$var logic 10 [% addl0in[9:0] $end
$var logic 10 \% addl1in[9:0] $end
$var logic 10 ]% addr0in[9:0] $end
$var logic 10 ^% addr1in[9:0] $end
$var logic 10 _% addlout[9:0] $end
$var logic 10 `% addrout[9:0] $end
$var logic 9 a% addl[8:0] $end
$var logic 9 b% addr[8:0] $end
$var logic 18 c% mulres[17:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 d% mulen $end
$upscope $end
$attrbegin misc 04 10 21 $end
$attrbegin misc 05 7 385 $end
$scope vhdl_architecture accum4 $end
$var logic 1 # clk $end
$var logic 1 e% en $end
$var logic 18 ]$ mul[17:0] $end
$var logic 18 \$ mul_odd[17:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 48 $end
$var enum 8 j# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 k# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 l# reg $end
$upscope $end
$var logic 32 e$ result[31:0] $end
$var logic 1 k$ sign_o $end
$var logic 32 f% accumulator[31:0] $end
$var logic 32 g% add_input0[31:0] $end
$var logic 32 h% add_input1[31:0] $end
$var logic 32 i% add_res[31:0] $end
$var logic 32 j% mul_odd_abs[31:0] $end
$var logic 32 k% mul_abs[31:0] $end
$var logic 32 l% max_value[31:0] $end
$upscope $end
$attrbegin misc 04 8 18 $end
$attrbegin misc 05 7 427 $end
$scope vhdl_architecture am3 $end
$var logic 1 # clk $end
$var logic 1 m% enable_add $end
$var logic 1 n% enable_mul $end
$var logic 8 J$ inl0[7:0] $end
$var logic 8 K$ inl1[7:0] $end
$var logic 8 L$ inr0[7:0] $end
$var logic 8 M$ inr1[7:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 18 $end
$var enum 8 9# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 :# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ;# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 <# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 =# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 ># addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 ?# en_addmul $end
$upscope $end
$var logic 18 ^$ am_res[17:0] $end
$var logic 9 o% addl0[8:0] $end
$var logic 9 p% addl1[8:0] $end
$var logic 9 q% addr0[8:0] $end
$var logic 9 r% addr1[8:0] $end
$var logic 10 s% addl0in[9:0] $end
$var logic 10 t% addl1in[9:0] $end
$var logic 10 u% addr0in[9:0] $end
$var logic 10 v% addr1in[9:0] $end
$var logic 10 w% addlout[9:0] $end
$var logic 10 x% addrout[9:0] $end
$var logic 9 y% addl[8:0] $end
$var logic 9 z% addr[8:0] $end
$var logic 18 {% mulres[17:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 |% mulen $end
$upscope $end
$attrbegin misc 04 9 17 $end
$attrbegin misc 05 7 442 $end
$scope vhdl_architecture accum3 $end
$var logic 1 # clk $end
$var logic 1 }% en $end
$var logic 18 ^$ mul[17:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 48 $end
$var enum 8 m# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 n# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 o# reg $end
$upscope $end
$var logic 32 f$ result[31:0] $end
$var logic 32 ~% accumulator[31:0] $end
$var logic 32 !& add_input0[31:0] $end
$var logic 32 "& add_input1[31:0] $end
$var logic 32 #& add_res[31:0] $end
$var logic 32 $& max_value[31:0] $end
$upscope $end
$attrbegin misc 04 8 18 $end
$attrbegin misc 05 7 483 $end
$scope vhdl_architecture am2 $end
$var logic 1 # clk $end
$var logic 1 %& enable_add $end
$var logic 1 && enable_mul $end
$var logic 8 N$ inl0[7:0] $end
$var logic 8 O$ inl1[7:0] $end
$var logic 8 P$ inr0[7:0] $end
$var logic 8 Q$ inr1[7:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 18 $end
$var enum 8 D# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 E# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 F# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 G# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 H# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 I# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 J# en_addmul $end
$upscope $end
$var logic 18 _$ am_res[17:0] $end
$var logic 9 '& addl0[8:0] $end
$var logic 9 (& addl1[8:0] $end
$var logic 9 )& addr0[8:0] $end
$var logic 9 *& addr1[8:0] $end
$var logic 10 +& addl0in[9:0] $end
$var logic 10 ,& addl1in[9:0] $end
$var logic 10 -& addr0in[9:0] $end
$var logic 10 .& addr1in[9:0] $end
$var logic 10 /& addlout[9:0] $end
$var logic 10 0& addrout[9:0] $end
$var logic 9 1& addl[8:0] $end
$var logic 9 2& addr[8:0] $end
$var logic 18 3& mulres[17:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 4& mulen $end
$upscope $end
$attrbegin misc 04 10 21 $end
$attrbegin misc 05 7 498 $end
$scope vhdl_architecture accum2 $end
$var logic 1 # clk $end
$var logic 1 5& en $end
$var logic 18 _$ mul[17:0] $end
$var logic 18 ^$ mul_odd[17:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 48 $end
$var enum 8 p# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 q# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 r# reg $end
$upscope $end
$var logic 32 g$ result[31:0] $end
$var logic 1 l$ sign_o $end
$var logic 32 6& accumulator[31:0] $end
$var logic 32 7& add_input0[31:0] $end
$var logic 32 8& add_input1[31:0] $end
$var logic 32 9& add_res[31:0] $end
$var logic 32 :& mul_odd_abs[31:0] $end
$var logic 32 ;& mul_abs[31:0] $end
$var logic 32 <& max_value[31:0] $end
$upscope $end
$attrbegin misc 04 8 18 $end
$attrbegin misc 05 7 538 $end
$scope vhdl_architecture am1 $end
$var logic 1 # clk $end
$var logic 1 =& enable_add $end
$var logic 1 >& enable_mul $end
$var logic 8 R$ inl0[7:0] $end
$var logic 8 S$ inl1[7:0] $end
$var logic 8 T$ inr0[7:0] $end
$var logic 8 U$ inr1[7:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 18 $end
$var enum 8 O# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 P# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 Q# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 R# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 S# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 T# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 U# en_addmul $end
$upscope $end
$var logic 18 `$ am_res[17:0] $end
$var logic 9 ?& addl0[8:0] $end
$var logic 9 @& addl1[8:0] $end
$var logic 9 A& addr0[8:0] $end
$var logic 9 B& addr1[8:0] $end
$var logic 10 C& addl0in[9:0] $end
$var logic 10 D& addl1in[9:0] $end
$var logic 10 E& addr0in[9:0] $end
$var logic 10 F& addr1in[9:0] $end
$var logic 10 G& addlout[9:0] $end
$var logic 10 H& addrout[9:0] $end
$var logic 9 I& addl[8:0] $end
$var logic 9 J& addr[8:0] $end
$var logic 18 K& mulres[17:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 L& mulen $end
$upscope $end
$attrbegin misc 04 9 17 $end
$attrbegin misc 05 7 553 $end
$scope vhdl_architecture accum1 $end
$var logic 1 # clk $end
$var logic 1 M& en $end
$var logic 18 `$ mul[17:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 48 $end
$var enum 8 s# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 t# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 u# reg $end
$upscope $end
$var logic 32 h$ result[31:0] $end
$var logic 32 N& accumulator[31:0] $end
$var logic 32 O& add_input0[31:0] $end
$var logic 32 P& add_input1[31:0] $end
$var logic 32 Q& add_res[31:0] $end
$var logic 32 R& max_value[31:0] $end
$upscope $end
$attrbegin misc 04 8 18 $end
$attrbegin misc 05 7 592 $end
$scope vhdl_architecture am0 $end
$var logic 1 # clk $end
$var logic 1 S& enable_add $end
$var logic 1 T& enable_mul $end
$var logic 8 V$ inl0[7:0] $end
$var logic 8 W$ inl1[7:0] $end
$var logic 8 X$ inr0[7:0] $end
$var logic 8 Y$ inr1[7:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 18 $end
$var enum 8 Z# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 [# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 \# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ]# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 ^# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 _# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 `# en_addmul $end
$upscope $end
$var logic 18 a$ am_res[17:0] $end
$var logic 9 U& addl0[8:0] $end
$var logic 9 V& addl1[8:0] $end
$var logic 9 W& addr0[8:0] $end
$var logic 9 X& addr1[8:0] $end
$var logic 10 Y& addl0in[9:0] $end
$var logic 10 Z& addl1in[9:0] $end
$var logic 10 [& addr0in[9:0] $end
$var logic 10 \& addr1in[9:0] $end
$var logic 10 ]& addlout[9:0] $end
$var logic 10 ^& addrout[9:0] $end
$var logic 9 _& addl[8:0] $end
$var logic 9 `& addr[8:0] $end
$var logic 18 a& mulres[17:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 b& mulen $end
$upscope $end
$attrbegin misc 04 10 21 $end
$attrbegin misc 05 7 607 $end
$scope vhdl_architecture accum0 $end
$var logic 1 # clk $end
$var logic 1 c& en $end
$var logic 18 a$ mul[17:0] $end
$var logic 18 `$ mul_odd[17:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 48 $end
$var enum 8 v# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 w# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 x# reg $end
$upscope $end
$var logic 32 i$ result[31:0] $end
$var logic 1 m$ sign_o $end
$var logic 32 d& accumulator[31:0] $end
$var logic 32 e& add_input0[31:0] $end
$var logic 32 f& add_input1[31:0] $end
$var logic 32 g& add_res[31:0] $end
$var logic 32 h& mul_odd_abs[31:0] $end
$var logic 32 i& mul_abs[31:0] $end
$var logic 32 j& max_value[31:0] $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/ppadd.vhdl 11 $end
$attrbegin misc 04 11 25 $end
$attrbegin misc 05 7 624 $end
$scope vhdl_architecture summation $end
$var logic 1 # clk $end
$var logic 1 k& en $end
$var logic 32 b$ in7[31:0] $end
$var logic 32 c$ in6[31:0] $end
$var logic 32 d$ in5[31:0] $end
$var logic 32 e$ in4[31:0] $end
$var logic 32 f$ in3[31:0] $end
$var logic 32 g$ in2[31:0] $end
$var logic 32 h$ in1[31:0] $end
$var logic 32 i$ in0[31:0] $end
$var logic 32 n$ loadin[31:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 52 $end
$var enum 8 "$ mux3 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 #$ mux2 $end
$attrbegin misc 07 "" 52 $end
$var enum 8 $$ mux1 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 %$ mux0 $end
$attrbegin misc 07 "" 54 $end
$var enum 8 &$ acc $end
$attrbegin misc 07 "" 55 $end
$var enum 8 '$ addsub $end
$attrbegin misc 07 "" 56 $end
$var enum 8 ($ reg $end
$upscope $end
$var logic 33 ,$ result[32:0] $end
$var logic 33 l& in3m[32:0] $end
$var logic 33 m& in2m[32:0] $end
$var logic 33 n& in1m[32:0] $end
$var logic 33 o& in0m[32:0] $end
$var logic 33 p& accm[32:0] $end
$var logic 33 q& sum1[32:0] $end
$var logic 33 r& sum0[32:0] $end
$var logic 34 s& sum1e[33:0] $end
$var logic 34 t& sum0e[33:0] $end
$var logic 34 u& rese[33:0] $end
$var logic 33 v& resreg[32:0] $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/lod.vhdl 12 $end
$attrbegin misc 04 12 26 $end
$attrbegin misc 05 7 642 $end
$scope vhdl_architecture lod_i $end
$var logic 1 # clk $end
$var logic 1 w& enable $end
$var logic 32 x& data3[31:0] $end
$var logic 32 y& data2[31:0] $end
$var logic 32 z& data1[31:0] $end
$var logic 32 {& data0[31:0] $end
$var logic 1 j$ sign3 $end
$var logic 1 k$ sign2 $end
$var logic 1 l$ sign1 $end
$var logic 1 m$ sign0 $end
$scope vhdl_record ctrl $end
$var logic 2 `! word[1:0] $end
$attrbegin misc 07 "" 10 $end
$var enum 8 a! store $end
$attrbegin misc 07 "" 11 $end
$var enum 8 b! output $end
$upscope $end
$scope vhdl_record to_shift $end
$attrbegin misc 07 "" 2 $end
$var enum 8 -$ acce $end
$var integer 32 .$ shift $end
$var logic 1 /$ use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 0$ shift_dir $end
$upscope $end
$var logic 1 1$ to_addbias $end
$var logic 32 |& to_detect[31:0] $end
$var logic 5 }& leading_one[4:0] $end
$var logic 5 ~& lzo1[4:0] $end
$var logic 5 !' lzo2[4:0] $end
$var logic 5 "' lzo3[4:0] $end
$var logic 1 #' to_sign $end
$var logic 1 $' s1 $end
$var logic 1 %' s2 $end
$var logic 1 &' s3 $end
$var logic 6 '' diff1[5:0] $end
$var logic 6 (' diff3[5:0] $end
$var logic 6 )' unnorm[5:0] $end
$var logic 6 *' unnormb[5:0] $end
$var logic 6 +' deta[5:0] $end
$upscope $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/ctrlmap_alu.vhdl 13 $end
$attrbegin misc 04 13 10 $end
$attrbegin misc 05 5 194 $end
$scope vhdl_architecture ctrlmap_alu_i $end
$attrbegin misc 07 "" 3 $end
$var enum 8 e! inst $end
$scope vhdl_record decoded $end
$attrbegin misc 07 "" 14 $end
$var enum 8 g" mux7l0 $end
$attrbegin misc 07 "" 15 $end
$var enum 8 h" mux7l1 $end
$attrbegin misc 07 "" 16 $end
$var enum 8 i" mux7r0 $end
$attrbegin misc 07 "" 17 $end
$var enum 8 j" mux7r1 $end
$scope vhdl_record addmul7 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 k" signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 l" signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 m" signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 n" signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 o" addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 p" addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 q" en_addmul $end
$upscope $end
$attrbegin misc 07 "" 20 $end
$var enum 8 r" mux6l0 $end
$attrbegin misc 07 "" 21 $end
$var enum 8 s" mux6l1 $end
$attrbegin misc 07 "" 22 $end
$var enum 8 t" mux6r0 $end
$attrbegin misc 07 "" 23 $end
$var enum 8 u" mux6r1 $end
$scope vhdl_record addmul6 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 v" signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 w" signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 x" signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 y" signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 z" addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 {" addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 |" en_addmul $end
$upscope $end
$attrbegin misc 07 "" 24 $end
$var enum 8 }" mux5l0 $end
$attrbegin misc 07 "" 25 $end
$var enum 8 ~" mux5l1 $end
$attrbegin misc 07 "" 26 $end
$var enum 8 !# mux5r0 $end
$attrbegin misc 07 "" 27 $end
$var enum 8 "# mux5r1 $end
$scope vhdl_record addmul5 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ## signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 $# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 %# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 &# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 '# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 (# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 )# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 28 $end
$var enum 8 *# mux4l0 $end
$attrbegin misc 07 "" 29 $end
$var enum 8 +# mux4l1 $end
$attrbegin misc 07 "" 30 $end
$var enum 8 ,# mux4r0 $end
$attrbegin misc 07 "" 31 $end
$var enum 8 -# mux4r1 $end
$scope vhdl_record addmul4 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 .# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 /# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 0# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 1# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 2# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 3# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 4# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 32 $end
$var enum 8 5# mux3l0 $end
$attrbegin misc 07 "" 33 $end
$var enum 8 6# mux3l1 $end
$attrbegin misc 07 "" 34 $end
$var enum 8 7# mux3r0 $end
$attrbegin misc 07 "" 35 $end
$var enum 8 8# mux3r1 $end
$scope vhdl_record addmul3 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 9# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 :# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ;# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 <# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 =# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 ># addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 ?# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 36 $end
$var enum 8 @# mux2l0 $end
$attrbegin misc 07 "" 37 $end
$var enum 8 A# mux2l1 $end
$attrbegin misc 07 "" 38 $end
$var enum 8 B# mux2r0 $end
$attrbegin misc 07 "" 39 $end
$var enum 8 C# mux2r1 $end
$scope vhdl_record addmul2 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 D# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 E# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 F# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 G# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 H# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 I# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 J# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 40 $end
$var enum 8 K# mux1l0 $end
$attrbegin misc 07 "" 41 $end
$var enum 8 L# mux1l1 $end
$attrbegin misc 07 "" 42 $end
$var enum 8 M# mux1r0 $end
$attrbegin misc 07 "" 43 $end
$var enum 8 N# mux1r1 $end
$scope vhdl_record addmul1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 O# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 P# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 Q# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 R# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 S# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 T# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 U# en_addmul $end
$upscope $end
$attrbegin misc 07 "" 44 $end
$var enum 8 V# mux0l0 $end
$attrbegin misc 07 "" 45 $end
$var enum 8 W# mux0l1 $end
$attrbegin misc 07 "" 46 $end
$var enum 8 X# mux0r0 $end
$attrbegin misc 07 "" 47 $end
$var enum 8 Y# mux0r1 $end
$scope vhdl_record addmul0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 Z# signl0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 [# signl1 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 \# signr0 $end
$attrbegin misc 07 "" 18 $end
$var enum 8 ]# signr1 $end
$attrbegin misc 07 "" 19 $end
$var enum 8 ^# addsubl $end
$attrbegin misc 07 "" 19 $end
$var enum 8 _# addsubr $end
$attrbegin misc 07 "" 2 $end
$var enum 8 `# en_addmul $end
$upscope $end
$upscope $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/ctrlmap_acc.vhdl 14 $end
$attrbegin misc 04 14 10 $end
$attrbegin misc 05 5 201 $end
$scope vhdl_architecture ctrlmap_acc_i $end
$attrbegin misc 07 "" 3 $end
$var enum 8 g! inst $end
$scope vhdl_record decoded $end
$scope vhdl_record acc7 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 a# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 b# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 c# reg $end
$upscope $end
$scope vhdl_record acc6 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 d# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 e# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 f# reg $end
$upscope $end
$scope vhdl_record acc5 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 g# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 h# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 i# reg $end
$upscope $end
$scope vhdl_record acc4 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 j# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 k# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 l# reg $end
$upscope $end
$scope vhdl_record acc3 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 m# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 n# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 o# reg $end
$upscope $end
$scope vhdl_record acc2 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 p# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 q# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 r# reg $end
$upscope $end
$scope vhdl_record acc1 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 s# acc $end
$attrbegin misc 07 "" 49 $end
$var enum 8 t# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 u# reg $end
$upscope $end
$scope vhdl_record acc0 $end
$attrbegin misc 07 "" 48 $end
$var enum 8 v# acc $end
$attrbegin misc 07 "" 51 $end
$var enum 8 w# add $end
$attrbegin misc 07 "" 50 $end
$var enum 8 x# reg $end
$upscope $end
$upscope $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/ppmap1.vhdl 15 $end
$attrbegin misc 04 15 13 $end
$attrbegin misc 05 5 209 $end
$scope vhdl_architecture ppmap1_i $end
$attrbegin misc 07 "" 4 $end
$var enum 8 l! inst $end
$scope vhdl_record decoded $end
$attrbegin misc 07 "" 52 $end
$var enum 8 y# mux3 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 z# mux2 $end
$attrbegin misc 07 "" 52 $end
$var enum 8 {# mux1 $end
$attrbegin misc 07 "" 53 $end
$var enum 8 |# mux0 $end
$attrbegin misc 07 "" 54 $end
$var enum 8 }# acc $end
$attrbegin misc 07 "" 55 $end
$var enum 8 ~# addsub $end
$attrbegin misc 07 "" 56 $end
$var enum 8 !$ reg $end
$upscope $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/ppshift.vhdl 16 $end
$attrbegin misc 04 16 26 $end
$attrbegin misc 05 5 224 $end
$scope vhdl_architecture shift $end
$var logic 1 # clk $end
$var logic 1 ,' enable_shift $end
$var logic 1 -' enable_add_bias $end
$var logic 1 .' enable_clip $end
$var logic 16 Q" bias[15:0] $end
$var logic 33 ,$ sum[32:0] $end
$scope vhdl_record shift_ctrl $end
$attrbegin misc 07 "" 2 $end
$var enum 8 '" acce $end
$var integer 32 (" shift $end
$var logic 1 )" use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 *" shift_dir $end
$upscope $end
$scope vhdl_record bias_add_ctrl $end
$attrbegin misc 07 "" 6 $end
$var enum 8 9" acc $end
$attrbegin misc 07 "" 7 $end
$var enum 8 :" quant $end
$upscope $end
$scope vhdl_record clip_ctrl $end
$attrbegin misc 07 "" 8 $end
$var enum 8 K" clip $end
$attrbegin misc 07 "" 9 $end
$var enum 8 L" outreg $end
$upscope $end
$scope vhdl_record lod_res $end
$attrbegin misc 07 "" 2 $end
$var enum 8 -$ acce $end
$var integer 32 .$ shift $end
$var logic 1 /$ use_lod $end
$attrbegin misc 07 "" 5 $end
$var enum 8 0$ shift_dir $end
$upscope $end
$var logic 1 1$ lod_neg $end
$var logic 16 \" shift_result[15:0] $end
$var logic 16 3$ clip_result[15:0] $end
$var logic 64 +$ outreg[63:0] $end
$var logic 33 /' addinput0[32:0] $end
$var logic 33 0' addinput1[32:0] $end
$var logic 33 1' addresult[32:0] $end
$var logic 33 2' accreg[32:0] $end
$var logic 34 3' beforeshift[33:0] $end
$var logic 34 4' aftershift[33:0] $end
$var logic 34 5' shiftresult[33:0] $end
$var logic 34 6' shiftresult_tmp[33:0] $end
$var logic 34 7' stage16[33:0] $end
$var logic 34 8' stage8[33:0] $end
$var logic 34 9' stage4[33:0] $end
$var logic 34 :' stage2[33:0] $end
$var logic 34 ;' stage1[33:0] $end
$var logic 34 <' addresult_tmp[33:0] $end
$var logic 32 =' to_clip[31:0] $end
$var logic 8 >' outreg_en[7:0] $end
$attrbegin misc 07 "" 2 $end
$var enum 8 ?' delayed_enable $end
$var logic 1 @' lod_neg_delayed $end
$attrbegin misc 07 "" 6 $end
$var enum 8 A' bias_add_ctrl2 $end
$var logic 16 B' clipresult[15:0] $end
$var logic 64 C' outreg_int[63:0] $end
$var logic 1 D' fill $end
$var logic 1 E' roundbit $end
$var logic 1 F' sticky16 $end
$var logic 1 G' sticky8 $end
$var logic 1 H' sticky4 $end
$var logic 1 I' sticky2 $end
$var logic 1 J' sticky1 $end
$var logic 1 K' sticky $end
$var logic 5 L' shift_bits[4:0] $end
$attrbegin misc 07 "" 5 $end
$var enum 8 M' shift_dir $end
$upscope $end
$attrbegin misc 03 /home/oscar/vector-engine/code/VE-LiU2/writebuff.vhdl 17 $end
$attrbegin misc 04 17 16 $end
$attrbegin misc 05 5 243 $end
$scope vhdl_architecture writebuff_i $end
$var logic 1 # clk $end
$var logic 1 N' en $end
$var logic 64 +$ data[63:0] $end
$scope vhdl_record ctrl $end
$attrbegin misc 07 "" 1 $end
$var enum 8 N! swap $end
$attrbegin misc 07 "" 2 $end
$var enum 8 O! datareg $end
$attrbegin misc 07 "" 2 $end
$var enum 8 P! weightreg $end
$upscope $end
$var logic 64 L dataout[63:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0N'
0N'
b00000000 M'
b00000 L'
uK'
0J'
0I'
0H'
0G'
0F'
0E'
0D'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU C'
bUUUUUUUUUUUUUUUU B'
b00000000 A'
u@'
b00000000 ?'
bUUUUUUUU >'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ='
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX <'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 ;'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 :'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 9'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 8'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 7'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 6'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 5'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 4'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 3'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 2'
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 1'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 0'
b000000000000000000000000000000000 /'
0.'
0.'
0.'
0-'
0-'
0-'
0-'
0,'
0,'
0,'
0,'
0,'
bXXXXXX +'
bXXXXXX *'
bXXXXXX )'
bXXXXXX ('
bXXXXXX ''
u&'
u%'
u$'
u#'
bUUUUU "'
bUUUUU !'
bUUUUU ~&
b11111 }&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU |&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU {&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU z&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU y&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU x&
0w&
0w&
0w&
0w&
0w&
0w&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU v&
b0000000000000000000000000000000001 u&
b0000000000000000000000000000000000 t&
b0000000000000000000000000000000001 s&
b000000000000000000000000000000000 r&
b000000000000000000000000000000000 q&
b000000000000000000000000000000000 p&
b000000000000000000000000000000000 o&
b000000000000000000000000000000000 n&
b000000000000000000000000000000000 m&
b000000000000000000000000000000000 l&
0k&
0k&
0k&
0k&
0k&
0k&
0k&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU j&
b000000000000000000000000UUUUUUUU i&
b0000000000000000UUUUUUUU00000000 h&
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX g&
b00000000000000000000000000000000 f&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU e&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU d&
0c&
0c&
0c&
0c&
0c&
0c&
0c&
0c&
b00000000 b&
bUUUUUUUUUUUUUUUUUU a&
bUUUUUUUUU `&
bUUUUUUUUU _&
b0100000000 ^&
bXXXXXXXXXX ]&
b1111111111 \&
b0100000001 [&
b0UUUUUUUU0 Z&
b0000000001 Y&
b000000000 X&
b010000000 W&
b0UUUUUUUU V&
b000000000 U&
0T&
0T&
0T&
0T&
0T&
0T&
0T&
0T&
0T&
0S&
0S&
0S&
0S&
0S&
0S&
0S&
0S&
0S&
0S&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU R&
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Q&
b00000000000000000000000000000000 P&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU O&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU N&
0M&
0M&
0M&
0M&
0M&
0M&
0M&
0M&
0M&
0M&
0M&
b00000000 L&
bUUUUUUUUUUUUUUUUUU K&
bUUUUUUUUU J&
bUUUUUUUUU I&
b0100000000 H&
bXXXXXXXXXX G&
b1111111111 F&
b0100000001 E&
bUUUUUUUUU1 D&
bUUUUUUUUU1 C&
b000000000 B&
b010000000 A&
bUUUUUUUUU @&
bUUUUUUUUU ?&
0>&
0>&
0>&
0>&
0>&
0>&
0>&
0>&
0>&
0>&
0>&
0>&
0=&
0=&
0=&
0=&
0=&
0=&
0=&
0=&
0=&
0=&
0=&
0=&
0=&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU <&
b000000000000000000000000UUUUUUUU ;&
b0000000000000000UUUUUUUU00000000 :&
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 9&
bUUUUUUUUUUUUUUUUUUUUUUUU00000000 8&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 7&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 6&
05&
05&
05&
05&
05&
05&
05&
05&
05&
05&
05&
05&
05&
05&
b00000000 4&
bUUUUUUUUUUUUUUUUUU 3&
bUUUUUUUUU 2&
bUUUUUUUUU 1&
b0100000000 0&
bXXXXXXXXXX /&
b1111111111 .&
b0100000001 -&
b0000000000 ,&
b0UUUUUUUU1 +&
b000000000 *&
b010000000 )&
b000000000 (&
b0UUUUUUUU '&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0&&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
0%&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU $&
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX #&
b00000000000000000000000000000000 "&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU !&
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ~%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
0}%
b00000000 |%
bUUUUUUUUUUUUUUUUUU {%
bUUUUUUUUU z%
bUUUUUUUUU y%
b0100000000 x%
bXXXXXXXXXX w%
b1111111111 v%
b0100000001 u%
bUUUUUUUUU0 t%
bUUUUUUUUU1 s%
b000000000 r%
b010000000 q%
bUUUUUUUUU p%
bUUUUUUUUU o%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0n%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
0m%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU l%
b000000000000000000000000UUUUUUUU k%
b0000000000000000UUUUUUUU00000000 j%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX i%
b00000000000000000000000000000000 h%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU g%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU f%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
0e%
b00000000 d%
bUUUUUUUUUUUUUUUUUU c%
bUUUUUUUUU b%
bUUUUUUUUU a%
b0100000000 `%
bXXXXXXXXXX _%
b1111111111 ^%
b0100000001 ]%
b0UUUUUUUU0 \%
b0000000001 [%
b000000000 Z%
b010000000 Y%
b0UUUUUUUU X%
b000000000 W%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0V%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
0U%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU T%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX S%
b00000000000000000000000000000000 R%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU Q%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU P%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
0O%
b00000000 N%
bUUUUUUUUUUUUUUUUUU M%
bUUUUUUUUU L%
bUUUUUUUUU K%
b0100000000 J%
bXXXXXXXXXX I%
b1111111111 H%
b0100000001 G%
bUUUUUUUUU1 F%
bUUUUUUUUU1 E%
b000000000 D%
b010000000 C%
bUUUUUUUUU B%
bUUUUUUUUU A%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0@%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
0?%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU >%
b000000000000000000000000UUUUUUUU =%
b0000000000000000UUUUUUUU00000000 <%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ;%
bUUUUUUUUUUUUUUUUUUUUUUUU00000000 :%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 9%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 8%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
07%
b00000000 6%
bUUUUUUUUUUUUUUUUUU 5%
bUUUUUUUUU 4%
bUUUUUUUUU 3%
b0100000000 2%
bXXXXXXXXXX 1%
b1111111111 0%
b0100000001 /%
b0000000000 .%
b0UUUUUUUU1 -%
b000000000 ,%
b010000000 +%
b000000000 *%
b0UUUUUUUU )%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0(%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
0'%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU &%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX %%
b00000000000000000000000000000000 $%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU #%
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU "%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
0!%
b00000000 ~$
bUUUUUUUUUUUUUUUUUU }$
bUUUUUUUUU |$
bUUUUUUUUU {$
b0100000000 z$
bXXXXXXXXXX y$
b1111111111 x$
b0100000001 w$
bUUUUUUUUU0 v$
bUUUUUUUUU1 u$
b000000000 t$
b010000000 s$
bUUUUUUUUU r$
bUUUUUUUUU q$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0p$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
0o$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU n$
um$
ul$
uk$
uj$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU i$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU h$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU g$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU f$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU e$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU d$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU c$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU b$
bUUUUUUUUUUUUUUUUUU a$
bUUUUUUUUUUUUUUUUUU `$
bUUUUUUUUUUUUUUUUUU _$
bUUUUUUUUUUUUUUUUUU ^$
bUUUUUUUUUUUUUUUUUU ]$
bUUUUUUUUUUUUUUUUUU \$
bUUUUUUUUUUUUUUUUUU [$
bUUUUUUUUUUUUUUUUUU Z$
b00000000 Y$
b10000000 X$
bUUUUUUUU W$
b00000000 V$
b00000000 U$
b10000000 T$
bUUUUUUUU S$
bUUUUUUUU R$
b00000000 Q$
b10000000 P$
b00000000 O$
bUUUUUUUU N$
b00000000 M$
b10000000 L$
bUUUUUUUU K$
bUUUUUUUU J$
b00000000 I$
b10000000 H$
bUUUUUUUU G$
b00000000 F$
b00000000 E$
b10000000 D$
bUUUUUUUU C$
bUUUUUUUU B$
b00000000 A$
b10000000 @$
b00000000 ?$
bUUUUUUUU >$
b00000000 =$
b10000000 <$
bUUUUUUUU ;$
bUUUUUUUU :$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
09$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
08$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
07$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
06$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
05$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
04$
bUUUUUUUUUUUUUUUU 3$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU 2$
u1$
b00000000 0$
u/$
b00000000000000000000000000000000 .$
b00000000 -$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ,$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU +$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU *$
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU )$
b00000000 ($
b00000000 '$
b00000000 &$
b00000000 %$
b00000000 $$
b00000000 #$
b00000000 "$
b00000001 !$
b00000000 ~#
b00000000 }#
b00000000 |#
b00000000 {#
b00000000 z#
b00000000 y#
b00000000 x#
b00000000 w#
b00000000 v#
b00000000 u#
b00000000 t#
b00000000 s#
b00000000 r#
b00000011 q#
b00000000 p#
b00000000 o#
b00000000 n#
b00000000 m#
b00000001 l#
b00000000 k#
b00000000 j#
b00000000 i#
b00000000 h#
b00000000 g#
b00000001 f#
b00000011 e#
b00000000 d#
b00000000 c#
b00000000 b#
b00000000 a#
b00000001 `#
b00000001 _#
b00000000 ^#
b00000001 ]#
b00000001 \#
b00000001 [#
b00000001 Z#
b00000001 Y#
b00000100 X#
b00000011 W#
b00000000 V#
b00000001 U#
b00000001 T#
b00000001 S#
b00000001 R#
b00000001 Q#
b00000000 P#
b00000000 O#
b00000001 N#
b00000101 M#
b00000011 L#
b00000001 K#
b00000001 J#
b00000001 I#
b00000000 H#
b00000001 G#
b00000001 F#
b00000001 E#
b00000001 D#
b00000001 C#
b00000110 B#
b00000001 A#
b00000010 @#
b00000001 ?#
b00000001 >#
b00000000 =#
b00000001 <#
b00000001 ;#
b00000000 :#
b00000000 9#
b00000001 8#
b00000101 7#
b00000011 6#
b00000010 5#
b00000000 4#
b00000001 3#
b00000000 2#
b00000001 1#
b00000001 0#
b00000001 /#
b00000001 .#
b00000001 -#
b00000011 ,#
b00000011 +#
b00000000 *#
b00000001 )#
b00000001 (#
b00000001 '#
b00000001 &#
b00000001 %#
b00000000 $#
b00000000 ##
b00000001 "#
b00000100 !#
b00000011 ~"
b00000010 }"
b00000000 |"
b00000001 {"
b00000000 z"
b00000001 y"
b00000001 x"
b00000001 w"
b00000001 v"
b00000001 u"
b00000100 t"
b00000001 s"
b00000001 r"
b00000000 q"
b00000001 p"
b00000000 o"
b00000001 n"
b00000001 m"
b00000000 l"
b00000000 k"
b00000001 j"
b00000011 i"
b00000011 h"
b00000001 g"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0f"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0e"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0d"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0c"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0b"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0a"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0`"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0_"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0^"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
0]"
bUUUUUUUUUUUUUUUU \"
b00000000 ["
b00000000 Z"
b00000000 Y"
b00000000 X"
b00000000 W"
b00000000 V"
b00000000 U"
b00000000 T"
b00000000 S"
bUUUUUUUUUUUUUUUU R"
bUUUUUUUUUUUUUUUU Q"
0P"
bUU O"
b00 N"
b000000 M"
b00000000 L"
b00000000 K"
b00000000 J"
b00000000 I"
b00000000 H"
b00000000 G"
b00000000 F"
b00000000 E"
b00000000 D"
b00000000 C"
b00000000 B"
b00000000 A"
b00000000 @"
b00000000 ?"
b00000000 >"
b00000000 ="
b00000000 <"
b00000000 ;"
b00000000 :"
b00000000 9"
b00000000 8"
b00000000 7"
b00000000 6"
b00000000 5"
b00000000 4"
b00000000 3"
b00000000 2"
b00000000 1"
b00000000 0"
b00000000 /"
b00000000 ."
b00000000 -"
b00000000 ,"
b00000000 +"
b00000000 *"
u)"
b00000000000000000000000000000000 ("
b00000000 '"
b00000000 &"
u%"
b00000000000000000000000000000000 $"
b00000000 #"
b00000000 ""
u!"
b00000000000000000000000000000000 ~!
b00000000 }!
b00000000 |!
u{!
b00000000000000000000000000000000 z!
b00000000 y!
b00000000 x!
uw!
b00000000000000000000000000000000 v!
b00000000 u!
b00000000 t!
us!
b00000000000000000000000000000000 r!
b00000000 q!
b00000000 p!
uo!
b00000000000000000000000000000000 n!
b00000000 m!
b00000000 l!
b00000000 k!
b00000000 j!
b00000000 i!
b00000000 h!
b00000000 g!
b00000000 f!
b00000000 e!
b00000000 d!
b00000000 c!
b00000000 b!
b00000000 a!
bUU `!
b00000000 _!
b00000000 ^!
bUU ]!
b00000000 \!
b00000000 [!
bUU Z!
b00000000 Y!
b00000000 X!
bUU W!
b00000000 V!
b00000000 U!
bUU T!
b00000000 S!
b00000000 R!
bUU Q!
b00000000 P!
b00000000 O!
b00000000 N!
b00000000 M!
b00000000 L!
b00000000 K!
b00000000 J!
b00000000 I!
b00000000 H!
b00000000 G!
b00000000 F!
b00000000 E!
b00000000 D!
b00000000 C!
b00000000 B!
b00000000 A!
b00000000 @!
b00000000 ?!
b00000000 >!
b00000000 =!
b00000000 <!
b00000000 ;!
b00000000 :!
b00000000 9!
b00000000 8!
b00000000 7!
b00000000 6!
b00000000 5!
b00000000 4!
b00000000 3!
b00000000 2!
b00000000 1!
b00000000 0!
b00000000 /!
b00000000 .!
b00000000 -!
b0000000 ,!
b00000000000 +!
0*!
b00000000000 )!
0(!
b00000000 '!
b00000000 &!
b00000000 %!
b00000000 $!
b00000000 #!
b00000000 "!
b00000000 !!
b00000000 ~
b00000000 }
b00000000 |
b00000000 {
b00000000 z
b00000000 y
b00000000 x
b00000000 w
b00000000 v
b00000000 u
b00000000 t
b00000000 s
b00000000 r
b00000000 q
b00000000 p
b00000000 o
b00000000 n
b00000000 m
b00000000 l
b00000000 k
b00000000 j
b00000000 i
b00000000 h
b00000000 g
b00000000 f
b00000000 e
b00000000 d
b00000000 c
b00000000 b
b00000000 a
b00000000 `
b00000000 _
b00000000 ^
b00000000 ]
b00000000 \
b00000000 [
b00000000 Z
b00000000 Y
b00000000 X
b100000000000 W
b0000 V
1U
0T
b000000 S
b00000000 R
0Q
b00000000 P
b00000000 O
1N
bUUUU M
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU L
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU K
0J
0I
0H
0G
b00000000 F
b00000000 E
b00000000 D
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU C
bUUUUUUUU B
bUUUUUUUU A
b00000000 @
b00000000 ?
bUU >
b00000000 =
b00000000 <
b00000000 ;
b00000000 :
b00000000 9
u8
b00000000000000000000000000000000 7
b00000000 6
b00000000 5
b00000000 4
b00000000 3
b00000000 2
b00000000 1
b00000000 0
b00000000 /
b00000000 .
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU -
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU ,
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU +
u*
u)
u(
u'
bUUUUUUUU &
bUUUUUUUU %
bUUUUUUUU $
1#
bZZ010ZZ011ZZ000ZZ100Z "
1!
$end
#2500000
bZZ010ZZ011ZZ000ZZ100Z "
0#
b00000000 D
b00000000 E
b00000000 F
0G
0H
0I
0J
1N
b000000 S
0T
1U
b100000000000 W
b000000 M"
b00 N"
0P"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
b00000001 g"
b00000011 h"
b00000011 i"
b00000001 j"
b00000001 m"
b00000001 n"
b00000001 p"
b00000001 r"
b00000001 s"
b00000100 t"
b00000001 u"
b00000001 v"
b00000001 w"
b00000001 x"
b00000001 y"
b00000001 {"
b00000010 }"
b00000011 ~"
b00000100 !#
b00000001 "#
b00000001 %#
b00000001 &#
b00000001 '#
b00000001 (#
b00000001 )#
b00000011 +#
b00000011 ,#
b00000001 -#
b00000001 .#
b00000001 /#
b00000001 0#
b00000001 1#
b00000001 3#
b00000010 5#
b00000011 6#
b00000101 7#
b00000001 8#
b00000001 ;#
b00000001 <#
b00000001 >#
b00000001 ?#
b00000010 @#
b00000001 A#
b00000110 B#
b00000001 C#
b00000001 D#
b00000001 E#
b00000001 F#
b00000001 G#
b00000001 I#
b00000001 J#
b00000001 K#
b00000011 L#
b00000101 M#
b00000001 N#
b00000001 Q#
b00000001 R#
b00000001 S#
b00000001 T#
b00000001 U#
b00000011 W#
b00000100 X#
b00000001 Y#
b00000001 Z#
b00000001 [#
b00000001 \#
b00000001 ]#
b00000001 _#
b00000001 `#
b00000011 e#
b00000001 f#
b00000001 l#
b00000011 q#
b00000001 !$
04$
05$
06$
07$
08$
09$
bUUUUUUUU :$
b10000000 <$
b00000000 =$
bUUUUUUUU >$
b00000000 ?$
b10000000 @$
b00000000 A$
bUUUUUUUU B$
b10000000 D$
b00000000 E$
b00000000 F$
b10000000 H$
b00000000 I$
bUUUUUUUU J$
b10000000 L$
b00000000 M$
bUUUUUUUU N$
b00000000 O$
b10000000 P$
b00000000 Q$
b10000000 T$
b00000000 U$
b00000000 V$
b10000000 X$
b00000000 Y$
0o$
0p$
bUUUUUUUUU q$
b010000000 s$
b000000000 t$
bUUUUUUUUU1 u$
bUUUUUUUUU0 v$
b0100000001 w$
b1111111111 x$
bXXXXXXXXXX y$
b0100000000 z$
0!%
b00000000000000000000000000000000 $%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX %%
0'%
0(%
b0UUUUUUUU )%
b000000000 *%
b010000000 +%
b000000000 ,%
b0UUUUUUUU1 -%
b0000000000 .%
b0100000001 /%
b1111111111 0%
bXXXXXXXXXX 1%
b0100000000 2%
07%
bUUUUUUUUUUUUUUUUUUUUUUUU00000000 :%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ;%
b0000000000000000UUUUUUUU00000000 <%
b000000000000000000000000UUUUUUUU =%
0?%
0@%
bUUUUUUUUU A%
b010000000 C%
b000000000 D%
bUUUUUUUUU1 E%
bUUUUUUUUU1 F%
b0100000001 G%
b1111111111 H%
bXXXXXXXXXX I%
b0100000000 J%
0O%
b00000000000000000000000000000000 R%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX S%
0U%
0V%
b000000000 W%
b0UUUUUUUU X%
b010000000 Y%
b000000000 Z%
b0000000001 [%
b0UUUUUUUU0 \%
b0100000001 ]%
b1111111111 ^%
bXXXXXXXXXX _%
b0100000000 `%
0e%
b00000000000000000000000000000000 h%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX i%
b0000000000000000UUUUUUUU00000000 j%
b000000000000000000000000UUUUUUUU k%
0m%
0n%
bUUUUUUUUU o%
b010000000 q%
b000000000 r%
bUUUUUUUUU1 s%
bUUUUUUUUU0 t%
b0100000001 u%
b1111111111 v%
bXXXXXXXXXX w%
b0100000000 x%
0}%
b00000000000000000000000000000000 "&
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX #&
0%&
0&&
b0UUUUUUUU '&
b000000000 (&
b010000000 )&
b000000000 *&
b0UUUUUUUU1 +&
b0000000000 ,&
b0100000001 -&
b1111111111 .&
bXXXXXXXXXX /&
b0100000000 0&
05&
bUUUUUUUUUUUUUUUUUUUUUUUU00000000 8&
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 9&
b0000000000000000UUUUUUUU00000000 :&
b000000000000000000000000UUUUUUUU ;&
0=&
0>&
b010000000 A&
b000000000 B&
bUUUUUUUUU1 C&
bUUUUUUUUU1 D&
b0100000001 E&
b1111111111 F&
bXXXXXXXXXX G&
b0100000000 H&
0M&
b00000000000000000000000000000000 P&
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX Q&
0S&
0T&
b000000000 U&
b0UUUUUUUU V&
b010000000 W&
b000000000 X&
b0000000001 Y&
b0UUUUUUUU0 Z&
b0100000001 [&
b1111111111 \&
bXXXXXXXXXX ]&
b0100000000 ^&
0c&
b00000000000000000000000000000000 f&
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX g&
b0000000000000000UUUUUUUU00000000 h&
b000000000000000000000000UUUUUUUU i&
0k&
b000000000000000000000000000000000 l&
b000000000000000000000000000000000 m&
b000000000000000000000000000000000 n&
b000000000000000000000000000000000 o&
b000000000000000000000000000000000 p&
b000000000000000000000000000000000 q&
b000000000000000000000000000000000 r&
b0000000000000000000000000000000001 s&
b0000000000000000000000000000000000 t&
b0000000000000000000000000000000001 u&
0w&
b11111 }&
bXXXXXX ''
bXXXXXX ('
bXXXXXX )'
bXXXXXX *'
bXXXXXX +'
0,'
0-'
0.'
b000000000000000000000000000000000 /'
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 1'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 3'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 4'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 6'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 7'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 8'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 9'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 :'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 ;'
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX <'
0D'
0E'
0F'
0G'
0H'
0I'
0J'
b00000 L'
0N'
#5000000
0N'
0.'
0-'
0,'
0w&
0k&
0c&
0T&
0S&
0M&
0>&
0=&
05&
0&&
0%&
0}%
0n%
0m%
0e%
0V%
0U%
0O%
0@%
0?%
07%
0(%
0'%
0!%
0p$
0o$
09$
08$
07$
06$
05$
04$
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
b010000000000 W
0U
0N
uI
uG
1#
bUUUU V
u(!
bU0000000000 )!
u*!
bU0000000000 +!
b00000001 ($
#7500000
0#
#10000000
1#
bUU000000000 +!
bUU000000000 )!
bXXXX V
0G
0I
b001000000000 W
1]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
14$
05$
06$
07$
08$
09$
0o$
0p$
0!%
0'%
0(%
07%
0?%
0@%
0O%
0U%
0V%
0e%
0m%
0n%
0}%
0%&
0&&
05&
0=&
0>&
0M&
0S&
0T&
0c&
0k&
0w&
0,'
0-'
0.'
0N'
#12500000
0#
#15000000
1#
0N'
0.'
0-'
0,'
0w&
0k&
0c&
0T&
1S&
0M&
0>&
1=&
05&
0&&
1%&
0}%
0n%
1m%
0e%
0V%
1U%
0O%
0@%
1?%
07%
0(%
1'%
0!%
0p$
1o$
09$
08$
07$
06$
15$
04$
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
1^"
0]"
b000100000000 W
bUUU00000000 )!
bUUU00000000 +!
#17500000
0#
#20000000
1#
bUUUU0000000 +!
bUUUU0000000 )!
b000010000000 W
0]"
0^"
1_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
04$
05$
16$
07$
08$
09$
0o$
1p$
0!%
0'%
1(%
07%
0?%
1@%
0O%
0U%
1V%
0e%
0m%
1n%
0}%
0%&
1&&
05&
0=&
1>&
0M&
0S&
1T&
0c&
0k&
0w&
0,'
0-'
0.'
0N'
bXXXXXXXXX {$
b010000000 |$
bXXXXXXXXX 3%
b010000000 4%
b00000001 N%
bXXXXXXXXX a%
b010000000 b%
b00000001 |%
b00000001 4&
b00000001 L&
b00000001 b&
#22500000
0#
#25000000
1#
0N'
0.'
0-'
0,'
0w&
0k&
1c&
0T&
0S&
1M&
0>&
0=&
15&
0&&
0%&
1}%
0n%
0m%
1e%
0V%
0U%
1O%
0@%
0?%
17%
0(%
0'%
1!%
0p$
0o$
09$
08$
17$
06$
05$
04$
0f"
0e"
0d"
0c"
0b"
0a"
1`"
0_"
0^"
0]"
b000001000000 W
bUUUUU000000 )!
bUUUUU000000 +!
b000000000000000000000000XXXXXXXX k%
b000000000000000000000000XXXXXXXX =%
b0000000000000000XXXXXXXX00000000 <%
bXXXXXXXXXXXXXXXXXXXXXXXX00000000 :%
bXXXXXXXXXXXXXXXXXX Z$
bXXXXXXXXXXXXXXXXXX [$
bXXXXXXXXXXXXXXXXXX ]$
bXXXXXXXXXXXXXXXXXX }$
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX #%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX &%
bXXXXXXXXXXXXXXXXXX 5%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 9%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX >%
bXXXXXXXXXXXXXXXXXX c%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX g%
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX l%
#27500000
0#
#30000000
1#
bUUUUUU00000 +!
bUUUUUU00000 )!
b000000100000 W
0]"
0^"
0_"
0`"
1a"
1b"
0c"
0d"
0e"
0f"
04$
05$
06$
07$
18$
19$
0o$
0p$
0!%
0'%
0(%
07%
0?%
0@%
0O%
0U%
0V%
0e%
0m%
0n%
0}%
0%&
0&&
05&
0=&
0>&
0M&
0S&
0T&
0c&
1k&
1w&
0,'
0-'
0.'
0N'
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX c$
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX e$
xj$
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX x&
#32500000
0#
#35000000
1#
0N'
0.'
0-'
1,'
0w&
0k&
0c&
0T&
0S&
0M&
0>&
0=&
05&
0&&
0%&
0}%
0n%
0m%
0e%
0V%
0U%
0O%
0@%
0?%
07%
0(%
0'%
0!%
0p$
0o$
09$
08$
07$
06$
05$
04$
0f"
0e"
0d"
1c"
0b"
0a"
0`"
0_"
0^"
0]"
b000000010000 W
bUUUUUUU0000 )!
bUUUUUUU0000 +!
b00000001 -$
1/$
01$
#37500000
0#
#40000000
1#
bUUUUUUUU000 +!
bUUUUUUUU000 )!
b000000001000 W
0]"
0^"
0_"
0`"
0a"
0b"
0c"
1d"
0e"
0f"
04$
05$
06$
07$
08$
09$
0o$
0p$
0!%
0'%
0(%
07%
0?%
0@%
0O%
0U%
0V%
0e%
0m%
0n%
0}%
0%&
0&&
05&
0=&
0>&
0M&
0S&
0T&
0c&
0k&
0w&
0,'
1-'
0.'
0N'
bUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU0 5'
0@'
0K'
#42500000
0#
#45000000
1#
0N'
1.'
0-'
0,'
0w&
0k&
0c&
0T&
0S&
0M&
0>&
0=&
05&
0&&
0%&
0}%
0n%
0m%
0e%
0V%
0U%
0O%
0@%
0?%
07%
0(%
0'%
0!%
0p$
0o$
09$
08$
07$
06$
05$
04$
0f"
1e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
b000000000100 W
bUUUUUUUUU00 )!
bUUUUUUUUU00 +!
bXXXXXXXXXXXXXXXX 3$
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX 2'
bXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ='
bXXXXXXXXXXXXXXXX B'
#47500000
0#
#50000000
1#
bUUUUUUUUUU0 +!
bUUUUUUUUUU0 )!
b000000000010 W
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
1f"
04$
05$
06$
07$
08$
09$
0o$
0p$
0!%
0'%
0(%
07%
0?%
0@%
0O%
0U%
0V%
0e%
0m%
0n%
0}%
0%&
0&&
05&
0=&
0>&
0M&
0S&
0T&
0c&
0k&
0w&
0,'
0-'
0.'
1N'
#52500000
0#
#55000000
1#
0N'
0.'
0-'
0,'
0w&
0k&
0c&
0T&
0S&
0M&
0>&
0=&
05&
0&&
0%&
0}%
0n%
0m%
0e%
0V%
0U%
0O%
0@%
0?%
07%
0(%
0'%
0!%
0p$
0o$
09$
08$
07$
06$
05$
04$
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
b000000000001 W
bUUUUUUUUUUU )!
bUUUUUUUUUUU +!
uJ
uH
#57500000
0#
#60000000
1#
0H
0J
b000000000000 W
0]"
0^"
0_"
0`"
0a"
0b"
0c"
0d"
0e"
0f"
04$
05$
06$
07$
08$
09$
0o$
0p$
0!%
0'%
0(%
07%
0?%
0@%
0O%
0U%
0V%
0e%
0m%
0n%
0}%
0%&
0&&
05&
0=&
0>&
0M&
0S&
0T&
0c&
0k&
0w&
0,'
0-'
0.'
0N'
#62500000
0#
#65000000
1#
#67500000
0#
#70000000
1#
#72500000
0#
#75000000
1#
#77500000
0#
#80000000
1#
#82500000
0#
#85000000
1#
#87500000
0#
#90000000
1#
#92500000
0#
#95000000
1#
#97500000
0#
#100000000
1#
#102500000
0#
#105000000
1#
#107500000
0#
#110000000
1#
#112500000
0#
#115000000
1#
#117500000
0#
#120000000
1#
#122500000
0#
#125000000
1#
#127500000
0#
#130000000
1#
#132500000
0#
#135000000
1#
#137500000
0#
#140000000
1#
#142500000
0#
#145000000
1#
#147500000
0#
#150000000
1#
#152500000
0#
#155000000
1#
#157500000
0#
#160000000
1#
#162500000
0#
#165000000
1#
#167500000
0#
#170000000
1#
#172500000
0#
#175000000
1#
#177500000
0#
#180000000
1#
#182500000
0#
#185000000
1#
#187500000
0#
#190000000
1#
#192500000
0#
#195000000
1#
#197500000
0#
#200000000
1#
#202500000
0#
#205000000
1#
#207500000
0#
#210000000
1#
#212500000
0#
#215000000
1#
#217500000
0#
#220000000
1#
#222500000
0#
#225000000
1#
#227500000
0#
#230000000
1#
#232500000
0#
#235000000
1#
#237500000
0#
#240000000
1#
#242500000
0#
#245000000
1#
#247500000
0#
#250000000
1#
#252500000
0#
#255000000
1#
#257500000
0#
#260000000
1#
#262500000
0#
#265000000
1#
#267500000
0#
#270000000
1#
#272500000
0#
#275000000
1#
#277500000
0#
#280000000
1#
#282500000
0#
#285000000
1#
#287500000
0#
#290000000
1#
#292500000
0#
#295000000
1#
#297500000
0#
#300000000
1#
#302500000
0#
#305000000
1#
#307500000
0#
#310000000
1#
#312500000
0#
#315000000
1#
#317500000
0#
#320000000
1#
#322500000
0#
#325000000
1#
#327500000
0#
#330000000
1#
#332500000
0#
#335000000
1#
#337500000
0#
#340000000
1#
#342500000
0#
#345000000
1#
#347500000
0#
#350000000
1#
#352500000
0#
#355000000
1#
#357500000
0#
#360000000
1#
#362500000
0#
#365000000
1#
#367500000
0#
#370000000
1#
#372500000
0#
#375000000
1#
#377500000
0#
#380000000
1#
#382500000
0#
#385000000
1#
#387500000
0#
#390000000
1#
#392500000
0#
#395000000
1#
#397500000
0#
#400000000
1#
#402500000
0#
#405000000
1#
#407500000
0#
#410000000
1#
#412500000
0#
#415000000
1#
#417500000
0#
#420000000
1#
#422500000
0#
#425000000
1#
#427500000
0#
#430000000
1#
#432500000
0#
#435000000
1#
#437500000
0#
#440000000
1#
#442500000
0#
#445000000
1#
#447500000
0#
#450000000
1#
#452500000
0#
#455000000
1#
#457500000
0#
#460000000
1#
#462500000
0#
#465000000
1#
#467500000
0#
#470000000
1#
#472500000
0#
#475000000
1#
#477500000
0#
#480000000
1#
#482500000
0#
#485000000
1#
#487500000
0#
#490000000
1#
#492500000
0#
#495000000
1#
#497500000
0#
